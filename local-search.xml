<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>RDS MySQL数据恢复</title>
    <link href="/2022/04/11/RDS-MySQL%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"/>
    <url>/2022/04/11/RDS-MySQL%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<blockquote><p>确保已安装 <code>MySQL</code> 版本与 <code>RDS MySQL</code> 版本相同。</p></blockquote><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>安装 <code>Percona XtraBackup</code>：</p><ul><li><p>对于MySQL 5.7、5.6或5.5实例，安装 <a href="https://www.percona.com/doc/percona-xtrabackup/2.4/installation.html?spm=a2c4g.11186623.0.0.7e75622e2iAVjU">Percona XtraBackup 2.4</a></p><p>在线安装：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">yum install https://repo.percona.com/yum/percona-release-latest.noarch.rpm<br><br><span class="hljs-comment"># 查看是否可以从仓库中获取 percona 包的信息</span><br>yum list | grep percona<br><br><span class="hljs-comment"># 启用 percona-relase 仓库</span><br>percona-release enable-only tools release<br><br><span class="hljs-comment"># 安装 Percona XtraBackup</span><br>yum install percona-xtrabackup-24<br></code></pre></div></td></tr></table></figure><p>安装包安装，针对 <code>CentOS 7</code>，若下载速度很慢，附件提供该安装包：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.4/\<br>binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.4-1.el7.x86_64.rpm<br><br>yum localinstall percona-xtrabackup-24-2.4.4-1.el7.x86_64.rpm<br></code></pre></div></td></tr></table></figure><p>卸载 <code>Percona XtraBackup</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">yum remove percona-xtrabackup<br></code></pre></div></td></tr></table></figure></li><li><p>对于MySQL 8.0实例，安装 <a href="https://www.percona.com/doc/percona-xtrabackup/8.0/installation.html">Percona XtraBackup 8.0</a></p></li></ul><p>安装解压工具 <code>qpress</code> ，附件提供下载包：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget <span class="hljs-string">&quot;http://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/attach/183466/cn_zh/1608011575185/qpress-11-linux-x64.tar&quot;</span><br><br>tar xvf qpress-11-linux-x64.tar<br><br><span class="hljs-built_in">chmod</span> 775 qpress<br><br><span class="hljs-built_in">cp</span> qpress /usr/bin<br></code></pre></div></td></tr></table></figure><h4 id="解压和恢复备份"><a href="#解压和恢复备份" class="headerlink" title="解压和恢复备份"></a>解压和恢复备份</h4><ol><li>在服务器上创建一个目录用于存储解压后的文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /mnt/mysql/data<br></code></pre></div></td></tr></table></figure><ol start="2"><li>解压 RDS 备份压缩包（文件后缀 <code>.tar.gz</code>）</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tar -izxvf RDS备份压缩文件.tar.gz -C /mnt/mysql/data<br></code></pre></div></td></tr></table></figure><blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># xbstream 压缩包（.xb.gz 后缀）</span><br>gzip -d -c RDS备份压缩文件.xb.gz | xbstream -x -v -C /mnt/mysql/data<br><br><span class="hljs-comment"># xbstream 文件包（_qp.xb 后缀）</span><br><span class="hljs-comment">## 解包</span><br><span class="hljs-built_in">cat</span> RDS备份压缩文件_qp.xb | xbstream -x -v -C /mnt/mysql/data<br><span class="hljs-comment">## 解压</span><br><span class="hljs-comment">### 对于 MySQL 5.6/5.7</span><br>innobackupex --decompress --remove-original /mnt/mysql/data<br><span class="hljs-comment">### 对于 MySQL 8.0</span><br>innobackupex --decompress --remove-original --target-dir=/mnt/mysql/data<br><br><span class="hljs-comment"># xbstream qpress压缩包（_xb.qp后缀）</span><br>qpress -<span class="hljs-keyword">do</span> RDS备份压缩文件_xb.qp | xbstream -x -v -C /mnt/mysql/data<br></code></pre></div></td></tr></table></figure></blockquote><ol start="3"><li>恢复解压好的备份文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">## MySQL 5.6/5.7（只测试了 5.7）</span><br>innobackupex --defaults-file=/mnt/mysql/data/backup-my.cnf --apply-log /mnt/mysql/data<br><br><span class="hljs-comment">## MySQL 8.0 (未测试)</span><br>xtrabackup --prepare --target-dir=/mnt/mysql/data<br>xtrabackup --datadir=/var/lib/mysql --copy-back --target-dir=/mnt/mysql/data<br></code></pre></div></td></tr></table></figure><ol start="4"><li>若恢复出现报错，请查看参考文档。</li></ol><h4 id="启动-MySQL"><a href="#启动-MySQL" class="headerlink" title="启动 MySQL"></a>启动 <code>MySQL</code></h4><ol><li>修改 <code>backup-my.cnf</code> 文件，<code>vim /mnt/mysql/data/backup-my.cnf</code> 添加如下参数：</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">lower_case_table_names=1<br></code></pre></div></td></tr></table></figure><ol start="2"><li>注释掉自建数据库（使用的是 <code>InnoDB</code> 引擎）不支持的参数：</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># innodb_log_checksum_algorithm</span><br><span class="hljs-comment"># innodb_fast_checksum</span><br><span class="hljs-comment"># innodb_log_block_size</span><br><span class="hljs-comment"># innodb_doublewrite_file</span><br><span class="hljs-comment"># innodb_encrypt_algorithm</span><br><span class="hljs-comment"># rds_encrypt_data</span><br><span class="hljs-comment"># redo_log_version</span><br><span class="hljs-comment"># master_key_id</span><br><span class="hljs-comment"># server_uuid</span><br></code></pre></div></td></tr></table></figure><blockquote><p>如果使用的是 <code>MyISAM</code> 引擎，需增加以下注释，并增加 <code>skip-grant-tables</code> 参数</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#innodb_log_checksum_algorithm=strict_crc32</span><br><span class="hljs-comment">#redo_log_version=1</span><br>skip-grant-tables<br></code></pre></div></td></tr></table></figure></blockquote><ol start="3"><li>修改文件属主，若没有该用户可忽略：</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> -R mysql:mysql /mnt/mysql/data<br></code></pre></div></td></tr></table></figure><ol start="4"><li>启动 <code>MySQL</code> 进程：</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># mysqld 命令启动</span><br>mysqld --default-file=/mnt/mysql/data/backup-my.cnf --datadir=/mnt/mysql/data &amp;<br><br><span class="hljs-comment"># docker 启动（已测试）</span><br>docker run --name mysql-5.7 -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 -v /mnt/mysql/data:/var/lib/mysql -v /mnt/mysql/data/backup-my.cnf:/etc/mysql/my.cnf -d mysql:5.7<br></code></pre></div></td></tr></table></figure><hr><p>参考文档：<a href="https://help.aliyun.com/document_detail/41817.html">RDS MySQL物理备份文件恢复到自建数据库 (aliyun.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES中的索引生命周期管理</title>
    <link href="/2020/09/06/ES%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86/"/>
    <url>/2020/09/06/ES%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h4 id="ILM"><a href="#ILM" class="headerlink" title="ILM"></a><a href="#ILM" title="ILM"></a>ILM</h4><p><code>ILM</code> ：索引生命周期管理，即 <code>Manage the index lifecycle</code> 。</p><blockquote><p>使用<code>ILM</code>应确保集群中的所有节点运行的是同一个版本，不然无法保证他们会按预期工作。</p></blockquote><h4 id="索引生命周期"><a href="#索引生命周期" class="headerlink" title="索引生命周期"></a><a href="#%E7%B4%A2%E5%BC%95%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F" title="索引生命周期"></a>索引生命周期</h4><p>索引的生命周期有四个阶段：</p><ol><li><code>Hot</code>：索引更新和查询很活跃。</li><li><code>Warm</code>：索引不再更新，但仍然有查询</li><li><code>Cold</code>：索引不再更新，只有很少的查询，而且查询速度也很慢</li><li><code>Delete</code>：索引不需要了，可以安全的删除</li></ol><p>索引的生命周期策略指定了适用于哪些阶段、在每个阶段中执行哪些操作以及何时在各个阶段之间进行转换。</p><h4 id="rollover"><a href="#rollover" class="headerlink" title="rollover"></a><a href="#rollover" title="rollover"></a>rollover</h4><p>当索引满足一定条件之后，将不再写入数据，而是自动创建一个索引，所有的数据将写入新的索引。</p><p>使用滚动索引能够：</p><ol><li>优化活跃索引，在高性能 <code>hot</code> 节点上提升高接收速率。</li><li>优化 <code>warm</code> 节点搜索性能。</li><li>将旧的、访问频率低的数据转移到成本低的 <code>cold</code> 节点上。</li><li>通过删除整个索引，根据索引保留策略删除数据。</li></ol><p>官方推荐使用 <code>data stream</code> 数据流来管理时间序列数据。每个数据流都需要一个<code>索引模板</code>，其中包括：</p><ol><li>数据流的名称或通配符（*）模式。</li><li>数据流时间戳字段。该字段必须映射为<code>date</code>或<code>date_nanos</code>数据类型。并且包含在索引到该数据流的每个文档中。</li><li>当创建每一个索引时将应用索引模板的映射和设置。</li></ol><p>数据流专为追加数据而设计，其中数据流名称可用作操作（读取、写入、翻转、收缩等）目标。如果需要更新数据，可以使用<code>索引别名</code>来管理时间序列数据。</p><h4 id="自动-rollover"><a href="#自动-rollover" class="headerlink" title="自动 rollover"></a><a href="#%E8%87%AA%E5%8A%A8-rollover" title="自动 rollover"></a>自动 rollover</h4><p><code>ILM</code> 会根据你的配置：<code>索引大小</code>、<code>文档数量</code>、<code>所在阶段</code> ，当满足这些条件时，自动实现 <code>rollover</code> 。</p><h4 id="索引生命周期策略的更新"><a href="#索引生命周期策略的更新" class="headerlink" title="索引生命周期策略的更新"></a><a href="#%E7%B4%A2%E5%BC%95%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AD%96%E7%95%A5%E7%9A%84%E6%9B%B4%E6%96%B0" title="索引生命周期策略的更新"></a>索引生命周期策略的更新</h4><ol><li>生命周期策略被应用到索引上时，索引会获取当前策略的最新版本号。如果更新了当前策略，版本号会发生冲突， <code>ILM</code> 就能检测出当前索引正在使用上一个版本的策略，需要将索引策略更新到最新版本。</li><li>如果将不同的策略应用到已经被管理的索引上时，索引还是使用先前管理策略中的缓存定义来完成当前阶段。直到进入下一个阶段，索引才会应用新的管理策略。</li></ol><h4 id="索引生命周期操作"><a href="#索引生命周期操作" class="headerlink" title="索引生命周期操作"></a><a href="#%E7%B4%A2%E5%BC%95%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%93%8D%E4%BD%9C" title="索引生命周期操作"></a>索引生命周期操作</h4><ol><li><code>allocate</code>：将分片移动到具有不同性能特征的节点上，并减少副本的数量。</li><li><code>delete</code>：永久移除索引。</li><li><code>force merge</code>：减少索引段的数量并清除已删除的文档。使索引为<code>只读</code>。</li><li><code>freeze</code>：冻结索引以最大程度减少其内存的占用量。</li><li><code>read only</code>：阻止对索引的写操作。</li><li><code>rollover</code>：删除索引作为过渡别名的写索引，然后开始索引到新索引。</li><li><code>set priority</code>：降低索引在生命周期中的优先级，以确保首先恢复热索引。</li><li><code>shrink</code>：通过将索引缩小为新索引来减少主分片的数量。</li><li><code>unfollow</code>：将关注者索引转换为常规索引。在进行滚动或收缩操作之前自动执行。</li><li><code>wait for snapshot</code>：删除索引之前，确保快照存在。</li></ol><h4 id="配置生命周期策略"><a href="#配置生命周期策略" class="headerlink" title="配置生命周期策略"></a><a href="#%E9%85%8D%E7%BD%AE%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AD%96%E7%95%A5" title="配置生命周期策略"></a>配置生命周期策略</h4><p>要让 <code>ILM</code> 管理索引，必须要在 <code>index.lifecycle.name</code> 索引设置中指定有效的策略。</p><p>要为滚动索引创建生命周期策略，你要创建该策略并把它加入到<code>索引模板</code>中。</p><h5 id="创建生命周期策略"><a href="#创建生命周期策略" class="headerlink" title="创建生命周期策略"></a><a href="#%E5%88%9B%E5%BB%BA%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AD%96%E7%95%A5" title="创建生命周期策略"></a>创建生命周期策略</h5><p>可以通过 <code>Kibana</code> 管理页面设置，也可以通过API设置。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">PUT _ilm/policy/my_policy  <br>&#123;  <br>  <span class="hljs-string">&quot;policy&quot;</span>: &#123;  <br><span class="hljs-string">&quot;phases&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;hot&quot;</span>: &#123;  <br><span class="hljs-string">&quot;actions&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;rollover&quot;</span>: &#123;  <br><span class="hljs-string">&quot;max_size&quot;</span>: <span class="hljs-string">&quot;25GB&quot;</span>  <br>  &#125;  <br>&#125;  <br>  &#125;,  <br>  &#123;  <br><span class="hljs-string">&quot;delete&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;min_age&quot;</span>: <span class="hljs-string">&quot;30d&quot;</span>,  <br>  <span class="hljs-string">&quot;actions&quot;</span>: &#123;  <br><span class="hljs-string">&quot;delete&quot;</span>: &#123;&#125;  <br>  &#125;  <br>&#125;  <br>  &#125;  <br>&#125;  <br>  &#125;  <br>&#125;  <br></code></pre></div></td></tr></table></figure><h5 id="将生命周期策略应用到索引模板中"><a href="#将生命周期策略应用到索引模板中" class="headerlink" title="将生命周期策略应用到索引模板中"></a><a href="#%E5%B0%86%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AD%96%E7%95%A5%E5%BA%94%E7%94%A8%E5%88%B0%E7%B4%A2%E5%BC%95%E6%A8%A1%E6%9D%BF%E4%B8%AD" title="将生命周期策略应用到索引模板中"></a>将生命周期策略应用到索引模板中</h5><p>可以通过 <code>Kibana</code> 管理页面设置，也可以通过API设置。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">PUT _index_template/my_template  <br>&#123;  <br>  <span class="hljs-string">&quot;index_patterns&quot;</span>: [<span class="hljs-string">&quot;test-*&quot;</span>],  <br>  <span class="hljs-string">&quot;template&quot;</span>: &#123;  <br><span class="hljs-string">&quot;settings&quot;</span>: &#123;  <br><span class="hljs-string">&quot;number_of_shards&quot;</span>: 1,  <br><span class="hljs-string">&quot;number_of_replicas&quot;</span>: 1,  <br><span class="hljs-string">&quot;index.lifecycle.name&quot;</span>: <span class="hljs-string">&quot;my_policy&quot;</span>,  <br><span class="hljs-string">&quot;index.lifecycle.rollover_alias&quot;</span>: <span class="hljs-string">&quot;test-alias&quot;</span>  <br>&#125;  <br>  &#125;  <br>&#125;  <br></code></pre></div></td></tr></table></figure><h5 id="创建一个初始被管理的索引"><a href="#创建一个初始被管理的索引" class="headerlink" title="创建一个初始被管理的索引"></a><a href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%88%9D%E5%A7%8B%E8%A2%AB%E7%AE%A1%E7%90%86%E7%9A%84%E7%B4%A2%E5%BC%95" title="创建一个初始被管理的索引"></a>创建一个初始被管理的索引</h5><p>如果要给滚动索引设置策略，需要手动创建第一个被该策略管理的索引，并指定为可写索引。</p><p>索引的名称必须跟索引模板里定义的模式相匹配，并且以数字结尾。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">PUT test-000001  <br>&#123;  <br>  <span class="hljs-string">&quot;aliases&quot;</span>: &#123;  <br><span class="hljs-string">&quot;test-alias&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;is_write_index&quot;</span>: <span class="hljs-literal">true</span>  <br>&#125;  <br>  &#125;  <br>&#125;  <br></code></pre></div></td></tr></table></figure><h5 id="手动应用生命周期策略"><a href="#手动应用生命周期策略" class="headerlink" title="手动应用生命周期策略"></a><a href="#%E6%89%8B%E5%8A%A8%E5%BA%94%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AD%96%E7%95%A5" title="手动应用生命周期策略"></a>手动应用生命周期策略</h5><p>你可以在创建索引的时候指定一个策略，也可以直接将策略应用到一个已经存在的索引上通过 <code>Kibana</code> 管理或者更新设置的API。一旦你应用了策略， <code>ILM</code> 立即会开始管理该索引。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">PUT test-index  <br>&#123;  <br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;  <br><span class="hljs-string">&quot;number_of_shards&quot;</span>: 1,  <br><span class="hljs-string">&quot;number_of_replicas&quot;</span>: 1,  <br><span class="hljs-string">&quot;index.lifecycle.name&quot;</span>: <span class="hljs-string">&quot;my_police&quot;</span>  <br>  &#125;  <br>&#125;  <br></code></pre></div></td></tr></table></figure><h5 id="将策略应用于多个索引"><a href="#将策略应用于多个索引" class="headerlink" title="将策略应用于多个索引"></a><a href="#%E5%B0%86%E7%AD%96%E7%95%A5%E5%BA%94%E7%94%A8%E4%BA%8E%E5%A4%9A%E4%B8%AA%E7%B4%A2%E5%BC%95" title="将策略应用于多个索引"></a>将策略应用于多个索引</h5><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">PUT mylogs-pre-ilm*/_settings  <br>&#123;  <br>  <span class="hljs-string">&quot;index&quot;</span>: &#123;  <br><span class="hljs-string">&quot;lifecycle&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;mylogs_policy_existing&quot;</span>  <br>&#125;  <br>  &#125;  <br>&#125;  <br></code></pre></div></td></tr></table></figure><h4 id="解决生命周期策略运行报错"><a href="#解决生命周期策略运行报错" class="headerlink" title="解决生命周期策略运行报错"></a><a href="#%E8%A7%A3%E5%86%B3%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AD%96%E7%95%A5%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99" title="解决生命周期策略运行报错"></a>解决生命周期策略运行报错</h4><p>查看错误：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">GET /my-index-000001/_ilm/explain  <br></code></pre></div></td></tr></table></figure><p>重新运行报错的一步：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">POST /my-index-000001/_ilm/retry  <br></code></pre></div></td></tr></table></figure><h4 id="开启和终止索引生命周期管理"><a href="#开启和终止索引生命周期管理" class="headerlink" title="开启和终止索引生命周期管理"></a><a href="#%E5%BC%80%E5%90%AF%E5%92%8C%E7%BB%88%E6%AD%A2%E7%B4%A2%E5%BC%95%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86" title="开启和终止索引生命周期管理"></a>开启和终止索引生命周期管理</h4><p>查看 <code>ILM</code> 状态：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">GET _ilm/status  <br><br><span class="hljs-comment"># 返回结果  </span><br>&#123;  <br>  <span class="hljs-string">&quot;operation_mode&quot;</span>: <span class="hljs-string">&quot;RUNNING&quot;</span>  <br>&#125;  <br></code></pre></div></td></tr></table></figure><p>终止 <code>ILM</code> ：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">POST _ilm/stop  <br>  <br><span class="hljs-comment"># 返回结果  </span><br>&#123;  <br>  <span class="hljs-string">&quot;operation_mode&quot;</span>: <span class="hljs-string">&quot;STOPPING&quot;</span>  <br>&#125;  <br>  <br>&#123;  <br>  <span class="hljs-string">&quot;operation_mode&quot;</span>: <span class="hljs-string">&quot;STOPPED&quot;</span>  <br>&#125;  <br></code></pre></div></td></tr></table></figure><p>开启 <code>ILM</code> ：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">POST _ilm/start<br></code></pre></div></td></tr></table></figure><h4 id="跳过rollover"><a href="#跳过rollover" class="headerlink" title="跳过rollover"></a><a href="#%E8%B7%B3%E8%BF%87rollover" title="跳过rollover"></a>跳过rollover</h4><p>设置 <code>index.lifecycle.indexing_complete</code> 为 <code>true</code> 。</p><p>举个例子，如果你要改变一系列新索引的名称，并保留之前根据你配置的策略产生的索引数据，你可以：</p><ol><li>为新的索引模式创建一个模板，并使用之前相同的策略。</li><li>根据新的模板创建一个初始索引。</li><li>使用索引别名API将别名的 <code>write</code> 索引更改为 <code>bootstrapped</code> 索引。</li><li>设置旧索引的 <code>index.lifecycle.indexing_complete</code> 的值为 <code>true</code> 。</li></ol><blockquote><p>相关链接：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.9/index-lifecycle-management.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.9/index-lifecycle-management.html</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Elasticsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch自定义文档得分并排序</title>
    <link href="/2020/08/16/Elasticsearch%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%A1%A3%E5%BE%97%E5%88%86%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <url>/2020/08/16/Elasticsearch%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%A1%A3%E5%BE%97%E5%88%86%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>大多数情况下，我们需要对查询结果排序，比方说按最新时间降序、按金额降序等。我们只需要对相应的字段 <code>sort</code> 即可。但有时候也会出现一些复杂的情况，比方说有A、B、C、D、E类数据，他想让你给这类数据重新定义优先级，按照B、E、D、A、C的顺序展示，并且每类数据内部按时间降序。然而最近我们也提出了一个类似这样的需求，查阅相关文档后，发现Elasticsearch里的<code>function_socre</code>函数可以实现这一功能， 遂将此学习内容做一个记录。</p><p>先来看看 <code>function_score</code> 是什么，它能做什么？根据官网的原话：</p><blockquote><p>The <code>function_score</code> allows you to modify the score of documents that are retrieved by a query.</p></blockquote><p><code>function_score</code> 允许你修改通过查询检索出来的文档的得分。</p><p>下面我们通过一些简单的例子来看看 <code>function_score</code> 怎么使用。</p><p><code>function_score</code> 可以为所有文档生成一个随机分数：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">GET us_police_shooting_index/_search  <br>&#123;  <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;  <br><span class="hljs-string">&quot;function_score&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;  <br>&#125;,  <br><span class="hljs-string">&quot;random_score&quot;</span>: &#123;&#125;,  <br><span class="hljs-string">&quot;boost&quot;</span>: 5,  <br><span class="hljs-string">&quot;boost_mode&quot;</span>: <span class="hljs-string">&quot;min&quot;</span>  <br>&#125;  <br>  &#125;  <br>&#125;  <br></code></pre></div></td></tr></table></figure><p>还可以组合不同的过滤条件，设置权重：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">GET us_police_shooting_index/_search  <br>&#123;  <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;  <br><span class="hljs-string">&quot;function_score&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;  <br><span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;  <br>  &#125;,  <br>  <span class="hljs-string">&quot;functions&quot;</span>: [  <br>&#123;  <br>  <span class="hljs-string">&quot;filter&quot;</span>: &#123;  <br><span class="hljs-string">&quot;match&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;race&quot;</span>: <span class="hljs-string">&quot;Asian&quot;</span>  <br>&#125;  <br>  &#125;,  <br>  <span class="hljs-string">&quot;weight&quot;</span>: 8  <br>&#125;,  <br>&#123;  <br>  <span class="hljs-string">&quot;filter&quot;</span>: &#123;  <br><span class="hljs-string">&quot;match&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;race&quot;</span>: <span class="hljs-string">&quot;White&quot;</span>  <br>&#125;  <br>  &#125;,  <br>  <span class="hljs-string">&quot;weight&quot;</span>: 2  <br>&#125;  <br>  ],  <br>  <span class="hljs-string">&quot;max_boost&quot;</span>: 20,  <br>  <span class="hljs-string">&quot;score_mode&quot;</span>: <span class="hljs-string">&quot;max&quot;</span>,  <br>  <span class="hljs-string">&quot;boost_mode&quot;</span>: <span class="hljs-string">&quot;sum&quot;</span>,  <br>  <span class="hljs-string">&quot;min_score&quot;</span>: 3  <br>&#125;  <br>  &#125;  <br>&#125;  <br></code></pre></div></td></tr></table></figure><blockquote><p>如果 <code>functions</code> 里的 <code>filter</code> 未给出，那么将会匹配所有文档，相当于 <code>&quot;match_all&quot;:&#123;&#125;</code> 。</p></blockquote><p>我们看看 <code>function_score</code> 为我们提供了哪些参数：</p><ul><li><p><code>score_mode</code> 指定了该如何去合并每个文档生成的评分：</p><table><thead><tr><th align="center"><strong>score_mode</strong></th><th align="center"><strong>定义</strong></th></tr></thead><tbody><tr><td align="center"><code>multiply</code></td><td align="center"><code>函数结果相乘（默认）</code></td></tr><tr><td align="center"><code>sum</code></td><td align="center"><code>函数结果相加</code></td></tr><tr><td align="center"><code>avg</code></td><td align="center"><code>函数结果的平均值</code></td></tr><tr><td align="center"><code>first</code></td><td align="center"><code>使用首个函数的结果做为最终结果</code></td></tr><tr><td align="center"><code>max</code></td><td align="center"><code>函数结果的最大值</code></td></tr><tr><td align="center"><code>min</code></td><td align="center"><code>函数结果的最小值</code></td></tr></tbody></table></li><li><p><code>boost_mode</code> 可以用来控制函数与查询评分 <code>_score</code> 合并后的结果：</p><table><thead><tr><th align="center"><strong>boost_mode</strong></th><th align="center"><strong>定义</strong></th></tr></thead><tbody><tr><td align="center"><code>multiply</code></td><td align="center"><code>评分_score与函数值的乘积(默认)</code></td></tr><tr><td align="center"><code>replace</code></td><td align="center"><code>评分_score会被忽略，仅使用函数值</code></td></tr><tr><td align="center"><code>sum</code></td><td align="center"><code>评分_score与函数值之和</code></td></tr><tr><td align="center"><code>avg</code></td><td align="center"><code>评分_score与函数值的平均值</code></td></tr><tr><td align="center"><code>max</code></td><td align="center"><code>评分_score与函数值间的最大值</code></td></tr><tr><td align="center"><code>min</code></td><td align="center"><code>评分_score与函数值间的最小值</code></td></tr></tbody></table></li><li><p><code>min_score</code> 可以设置为期望分数的阈值，能够排出不符合特定分数阈值的文档。</p></li><li><p><code>max_boost</code> 可以限制函数的最大效果，但是不会对最终的评分 <code>_score</code> 产生直接的影响。</p></li></ul><p><code>function_score</code> 还提供几种类型的评分函数：</p><ul><li><code>script_score</code> ：脚本评分函数允许计算自定义查询的评分，脚本表达式需使用文档中的数值字段。查询的分数将与脚本评分的结果相乘，如果不想使用这种方式，可通过设置 <code>&quot;boost_mode&quot;:&quot;replace&quot;</code> 来禁止。</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">GET /_search  <br>&#123;  <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;  <br><span class="hljs-string">&quot;function_score&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;  <br><span class="hljs-string">&quot;match&quot;</span>: &#123; <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;elasticsearch&quot;</span> &#125;  <br>  &#125;,  <br>  <span class="hljs-string">&quot;script_score&quot;</span>: &#123;  <br><span class="hljs-string">&quot;script&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;Math.log(2 + doc[&#x27;likes&#x27;].value)&quot;</span>  <br>&#125;  <br>  &#125;  <br>&#125;  <br>  &#125;  <br>&#125;  <br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">GET /_search  <br>&#123;  <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;  <br><span class="hljs-string">&quot;function_score&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;  <br><span class="hljs-string">&quot;match&quot;</span>: &#123; <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;elasticsearch&quot;</span> &#125;  <br>  &#125;,  <br>  <span class="hljs-string">&quot;script_score&quot;</span>: &#123;  <br><span class="hljs-string">&quot;script&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;params&quot;</span>: &#123;  <br><span class="hljs-string">&quot;a&quot;</span>: 5,  <br><span class="hljs-string">&quot;b&quot;</span>: 1.2  <br>  &#125;,  <br>  <span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;params.a / Math.pow(params.b, doc[&#x27;likes&#x27;].value)&quot;</span>  <br>&#125;  <br>  &#125;  <br>&#125;  <br>  &#125;  <br>&#125;  <br></code></pre></div></td></tr></table></figure><ul><li><p><code>weight</code> ：权重函数可以将评分与 <code>weight</code> 值相乘，<code>weight</code> 的值是 <code>float</code> 类型。</p></li><li><p><code>random_score</code> ：随机评分函数会产生一个0到1之间的分数，当种子 <code>feed</code> 值相同时，生成的随机结果是一致的。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">GET /_search  <br>&#123;  <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;  <br><span class="hljs-string">&quot;function_score&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;random_score&quot;</span>: &#123;  <br><span class="hljs-string">&quot;seed&quot;</span>: 10,  <br><span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;_seq_no&quot;</span>  <br>  &#125;  <br>&#125;  <br>  &#125;  <br>&#125;  <br></code></pre></div></td></tr></table></figure><ul><li><code>field_value_factor</code> ：通过使用文档中的某个字段来影响评分。如果这个字段有多个值，那么只有第一个值才被用来计算评分。</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">GET /_search  <br>&#123;  <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;  <br><span class="hljs-string">&quot;function_score&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;field_value_factor&quot;</span>: &#123;  <br><span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;likes&quot;</span>,  <br><span class="hljs-string">&quot;factor&quot;</span>: 1.2,  <br><span class="hljs-string">&quot;modifier&quot;</span>: <span class="hljs-string">&quot;sqrt&quot;</span>,  <br><span class="hljs-string">&quot;missing&quot;</span>: 1  <br>  &#125;  <br>&#125;  <br>  &#125;  <br>&#125;  <br><span class="hljs-comment"># 上面评分的计算相当于 sqrt(1.2 * doc[&#x27;likes&#x27;].value)  </span><br></code></pre></div></td></tr></table></figure><ul><li><p><code>filed</code> ：文档中提取的字段。</p></li><li><p><code>factor</code> ：字段值乘以的可选因子，默认是 <code>1</code> 。</p></li><li><p><code>modifier</code> ：<code>none</code>, <code>log</code>, <code>log1p</code>, <code>log2p</code>, <code>ln</code>, <code>ln1p</code>, <code>ln2p</code>, <code>square</code>, <code>sqrt</code>, <code>reciprocal</code>。默认值是 <code>none</code>.</p></li><li><p><code>decay_functions</code> ：衰减函数的功能与范围查询类似，但它具有更平滑的边缘。衰减函数支持 <code>gauss</code> 、<code>linear</code> 、<code>exp</code> 中任意一种函数，并且都能接收以下参数：</p><ul><li><code>origin</code> ：中心点或字段可能的最佳值，落在原点 <code>origin</code> 上的文档评分 <code>_score</code> 为满分 <code>1.0</code> 。字段必须是数值、日期或地理坐标类型。</li><li><code>scale</code> ：衰减率，一个文档从原点 <code>origin</code> 下落时，评分 <code>_score</code> 改变的速度。</li><li><code>offset</code> ：以原点 <code>origin</code> 为中心点，为其设置一个非零的 <code>offset</code> 覆盖一个范围，而不只是单个原点。在范围 <code>-offset &lt;= origin &lt;= +offset</code> 内的所有评分 <code>_score</code> 都是 <code>1.0</code> 。</li><li><code>decay</code> ：从原点 <code>origin</code> 衰减到 <code>scale</code> 所得的评分 <code>_score</code> ，默认是 <code>0.5</code> 。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">GET /_search  <br>&#123;  <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;  <br><span class="hljs-string">&quot;function_score&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;functions&quot;</span>: [  <br>&#123;  <br><span class="hljs-string">&quot;gauss&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;price&quot;</span>: &#123;  <br><span class="hljs-string">&quot;origin&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,  <br><span class="hljs-string">&quot;scale&quot;</span>: <span class="hljs-string">&quot;20&quot;</span>  <br>  &#125;  <br>&#125;  <br>&#125;,  <br>&#123;  <br><span class="hljs-string">&quot;gauss&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;location&quot;</span>: &#123;  <br><span class="hljs-string">&quot;origin&quot;</span>: <span class="hljs-string">&quot;11, 12&quot;</span>,  <br><span class="hljs-string">&quot;scale&quot;</span>: <span class="hljs-string">&quot;2km&quot;</span>  <br>  &#125;  <br>&#125;  <br>&#125;  <br>  ],  <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;  <br><span class="hljs-string">&quot;match&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;properties&quot;</span>: <span class="hljs-string">&quot;balcony&quot;</span>  <br>&#125;  <br>  &#125;,  <br>  <span class="hljs-string">&quot;score_mode&quot;</span>: <span class="hljs-string">&quot;multiply&quot;</span>  <br>&#125;  <br>  &#125;  <br>&#125;  <br></code></pre></div></td></tr></table></figure><p>官方文档有这么一张图片说明了三个函数的衰减曲线形状：</p><p><img src="/images/decay_function.png"></p><p>以上就是 <code>function_score</code> 函数的大部分内容。现在我们来具体实现文章开头提到的一个需求。我准备了一份不同歌手的歌曲发行时间的测试数据，主要字段有歌手名name、歌曲名song、发行时间publishDate。</p><p>首先我们先按歌手名降序，发行时间升序，很容易能写出下面的DSL语句：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">GET music_index/_search  <br>&#123;  <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;  <br><span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;  <br>  &#125;,  <br>  <span class="hljs-string">&quot;sort&quot;</span>: [  <br>&#123;  <br>  <span class="hljs-string">&quot;name.keyword&quot;</span>: &#123;  <br><span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span>  <br>  &#125;,  <br>  <span class="hljs-string">&quot;publishDate.keyword&quot;</span>: &#123;  <br><span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span>  <br>  &#125;  <br>&#125;  <br>  ]  <br>&#125;<br></code></pre></div></td></tr></table></figure><p>现在我想按许冠杰、邓丽君、陈百强的顺序进行展示，并且各自的歌曲按发行时间升序，<code>function_score</code> 就体现出它的作用了：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">GET music_index/_search  <br>&#123;  <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;  <br><span class="hljs-string">&quot;function_score&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;  <br><span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;  <br>  &#125;,  <br>  <span class="hljs-string">&quot;functions&quot;</span>: [  <br>&#123;  <br>  <span class="hljs-string">&quot;filter&quot;</span>: &#123;  <br><span class="hljs-string">&quot;term&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;name.keyword&quot;</span>: <span class="hljs-string">&quot;许冠杰&quot;</span>  <br>&#125;  <br>  &#125;,  <br>  <span class="hljs-string">&quot;weight&quot;</span>: 5  <br>&#125;,  <br>&#123;  <br>  <span class="hljs-string">&quot;filter&quot;</span>: &#123;  <br><span class="hljs-string">&quot;term&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;name.keyword&quot;</span>: <span class="hljs-string">&quot;邓丽君&quot;</span>  <br>&#125;  <br>  &#125;,  <br>  <span class="hljs-string">&quot;weight&quot;</span>: 4  <br>&#125;,  <br>&#123;  <br>  <span class="hljs-string">&quot;filter&quot;</span>: &#123;  <br><span class="hljs-string">&quot;term&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;name.keyword&quot;</span>: <span class="hljs-string">&quot;陈百强&quot;</span>  <br>&#125;  <br>  &#125;,  <br>  <span class="hljs-string">&quot;weight&quot;</span>: 3  <br>&#125;  <br>  ]  <br>&#125;  <br>  &#125;,  <br>  <span class="hljs-string">&quot;sort&quot;</span>: [  <br>&#123;  <br>  <span class="hljs-string">&quot;_score&quot;</span>: &#123;  <br><span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span>  <br>  &#125;,  <br>  <span class="hljs-string">&quot;publishDate.keyword&quot;</span>: &#123;  <br><span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span>  <br>  &#125;  <br>&#125;  <br>  ]  <br>&#125;<br></code></pre></div></td></tr></table></figure><p>由于查询文档太长，我就不粘贴查询结果了。感兴趣的可以自己动手尝试尝试，如果需要测试数据，公众号回复 <code>0816</code> 即可获取相关文件。</p><blockquote><p>相关链接：<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html</a><br><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/function-score-query.html">https://www.elastic.co/guide/cn/elasticsearch/guide/current/function-score-query.html</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Elasticsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch中Script脚本执行除法遇到的问题</title>
    <link href="/2020/08/05/Elasticsearch%E4%B8%ADScript%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8C%E9%99%A4%E6%B3%95%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2020/08/05/Elasticsearch%E4%B8%ADScript%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8C%E9%99%A4%E6%B3%95%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>最近有一个需求，需要修改ES文档中的金额，以前是以 <code>元</code> 为单位，现在要换算成以 <code>万元</code> 为单位，但并不是所有数据都需要做处理，有一个Excel存储着不需要处理的数据。我第一时间想到的就是用 <code>Python</code> 写一个脚本处理ES文档，噼里啪啦一顿操作之后，基本就实现了该功能。但是处理的结果并不是预期的那样。下面我简单的举一个例子来复现一下我所遇到的问题。</p><p>首先，创建一个索引 <code>test</code> ,</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 创建test索引  </span><br>PUT <span class="hljs-built_in">test</span>  <br></code></pre></div></td></tr></table></figure><p>给索引设置 <code>mapping</code> 属性，</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 设置索引mapping属性  </span><br>PUT <span class="hljs-built_in">test</span>/_mapping  <br>&#123;  <br>  <span class="hljs-string">&quot;properties&quot;</span>: &#123;  <br><span class="hljs-string">&quot;id&quot;</span>: &#123;<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>&#125;,  <br><span class="hljs-string">&quot;money&quot;</span>: &#123;<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;double&quot;</span>&#125;  <br>  &#125;  <br>&#125;  <br></code></pre></div></td></tr></table></figure><p>给索引添加几条测试文档数据，</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 批量插入数据  </span><br>POST _bulk  <br>&#123;<span class="hljs-string">&quot;index&quot;</span>: &#123;<span class="hljs-string">&quot;_index&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>&#125;&#125;  <br>&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;money&quot;</span>: 23423123&#125;  <br>&#123;<span class="hljs-string">&quot;index&quot;</span>: &#123;<span class="hljs-string">&quot;_index&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>&#125;&#125;  <br>&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;money&quot;</span>: 1233656&#125;  <br>&#123;<span class="hljs-string">&quot;index&quot;</span>: &#123;<span class="hljs-string">&quot;_index&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>&#125;&#125;  <br>&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;money&quot;</span>:899234&#125;  <br></code></pre></div></td></tr></table></figure><p>既然要更新文档数据，肯定要用到ES的 <code>_update_by_query</code> API。我们现在将每个文档的 <code>money</code> 值除以 <code>10000</code> ，先自己考虑一下应该会得到一个什么样的结果。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 更新操作，将每个文档的money除以10000  </span><br>POST <span class="hljs-built_in">test</span>/_update_by_query  <br>&#123;  <br>  <span class="hljs-string">&quot;script&quot;</span>: &#123;  <br><span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;ctx._source.money=ctx._source.money/10000&quot;</span>,  <br><span class="hljs-string">&quot;lang&quot;</span>: <span class="hljs-string">&quot;painless&quot;</span>  <br>  &#125;,  <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;  <br><span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;  <br>  &#125;  <br>&#125;  <br></code></pre></div></td></tr></table></figure><p>有结果了吗？我们来看看ES给我们处理后的结果是啥样的，</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看文档  </span><br>GET <span class="hljs-built_in">test</span>/_search  <br>  <br><span class="hljs-comment"># 结果  </span><br>&#123;  <br>  <span class="hljs-string">&quot;took&quot;</span> : 0,  <br>  <span class="hljs-string">&quot;timed_out&quot;</span> : <span class="hljs-literal">false</span>,  <br>  <span class="hljs-string">&quot;_shards&quot;</span> : &#123;  <br><span class="hljs-string">&quot;total&quot;</span> : 1,  <br><span class="hljs-string">&quot;successful&quot;</span> : 1,  <br><span class="hljs-string">&quot;skipped&quot;</span> : 0,  <br><span class="hljs-string">&quot;failed&quot;</span> : 0  <br>  &#125;,  <br>  <span class="hljs-string">&quot;hits&quot;</span> : &#123;  <br><span class="hljs-string">&quot;total&quot;</span> : &#123;  <br>  <span class="hljs-string">&quot;value&quot;</span> : 3,  <br>  <span class="hljs-string">&quot;relation&quot;</span> : <span class="hljs-string">&quot;eq&quot;</span>  <br>&#125;,  <br><span class="hljs-string">&quot;max_score&quot;</span> : 1.0,  <br><span class="hljs-string">&quot;hits&quot;</span> : [  <br>  &#123;  <br><span class="hljs-string">&quot;_index&quot;</span> : <span class="hljs-string">&quot;test&quot;</span>,  <br><span class="hljs-string">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,  <br><span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;LtrDs3MBvTJiRW6OWDLQ&quot;</span>,  <br><span class="hljs-string">&quot;_score&quot;</span> : 1.0,  <br><span class="hljs-string">&quot;_source&quot;</span> : &#123;  <br>  <span class="hljs-string">&quot;money&quot;</span> : 2342,  <br>  <span class="hljs-string">&quot;id&quot;</span> : <span class="hljs-string">&quot;1&quot;</span>  <br>&#125;  <br>  &#125;,  <br>  &#123;  <br><span class="hljs-string">&quot;_index&quot;</span> : <span class="hljs-string">&quot;test&quot;</span>,  <br><span class="hljs-string">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,  <br><span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;MNrDs3MBvTJiRW6OYTJx&quot;</span>,  <br><span class="hljs-string">&quot;_score&quot;</span> : 1.0,  <br><span class="hljs-string">&quot;_source&quot;</span> : &#123;  <br>  <span class="hljs-string">&quot;money&quot;</span> : 123,  <br>  <span class="hljs-string">&quot;id&quot;</span> : <span class="hljs-string">&quot;2&quot;</span>  <br>&#125;  <br>  &#125;,  <br>  &#123;  <br><span class="hljs-string">&quot;_index&quot;</span> : <span class="hljs-string">&quot;test&quot;</span>,  <br><span class="hljs-string">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,  <br><span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;MtrDs3MBvTJiRW6OaTLM&quot;</span>,  <br><span class="hljs-string">&quot;_score&quot;</span> : 1.0,  <br><span class="hljs-string">&quot;_source&quot;</span> : &#123;  <br>  <span class="hljs-string">&quot;money&quot;</span> : 89,  <br>  <span class="hljs-string">&quot;id&quot;</span> : <span class="hljs-string">&quot;3&quot;</span>  <br>&#125;  <br>  &#125;  <br>]  <br>  &#125;  <br>&#125;<br></code></pre></div></td></tr></table></figure><p>很明显更新后的结果去掉了小数点后面的数，这并不是我想要的。这是怎么回事呢？经过查找很多的资料，最终在官方文档里找到这么一句话：</p><blockquote><p>Use the <code>division operator &#39;/&#39;</code> to DIVIDE one numeric type value by another. Rules for NaN values and division by zero follow the JVM specification. Division with integer values drops the remainder of the resultant value.</p></blockquote><p>最后一句话的意思很明了，“整数相除会丢弃结果值的余数部分”。既然整数会有这种情况，那么我将 <code>10000</code> 换成 <code>10000.0</code> 再来试试，</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 更新操作，将每个文档的money除以10000.0  </span><br>POST <span class="hljs-built_in">test</span>/_update_by_query  <br>&#123;  <br>  <span class="hljs-string">&quot;script&quot;</span>: &#123;  <br><span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;ctx._source.money=ctx._source.money/10000.0&quot;</span>,  <br><span class="hljs-string">&quot;lang&quot;</span>: <span class="hljs-string">&quot;painless&quot;</span>  <br>  &#125;,  <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;  <br><span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;  <br>  &#125;  <br>&#125;  <br></code></pre></div></td></tr></table></figure><p>这次的更新结果如下，</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&#123;  <br>  <span class="hljs-string">&quot;took&quot;</span> : 0,  <br>  <span class="hljs-string">&quot;timed_out&quot;</span> : <span class="hljs-literal">false</span>,  <br>  <span class="hljs-string">&quot;_shards&quot;</span> : &#123;  <br><span class="hljs-string">&quot;total&quot;</span> : 1,  <br><span class="hljs-string">&quot;successful&quot;</span> : 1,  <br><span class="hljs-string">&quot;skipped&quot;</span> : 0,  <br><span class="hljs-string">&quot;failed&quot;</span> : 0  <br>  &#125;,  <br>  <span class="hljs-string">&quot;hits&quot;</span> : &#123;  <br><span class="hljs-string">&quot;total&quot;</span> : &#123;  <br>  <span class="hljs-string">&quot;value&quot;</span> : 3,  <br>  <span class="hljs-string">&quot;relation&quot;</span> : <span class="hljs-string">&quot;eq&quot;</span>  <br>&#125;,  <br><span class="hljs-string">&quot;max_score&quot;</span> : 1.0,  <br><span class="hljs-string">&quot;hits&quot;</span> : [  <br>  &#123;  <br><span class="hljs-string">&quot;_index&quot;</span> : <span class="hljs-string">&quot;test&quot;</span>,  <br><span class="hljs-string">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,  <br><span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;Ptq5s3MBvTJiRW6OoTEW&quot;</span>,  <br><span class="hljs-string">&quot;_score&quot;</span> : 1.0,  <br><span class="hljs-string">&quot;_source&quot;</span> : &#123;  <br>  <span class="hljs-string">&quot;money&quot;</span> : 2342.3123,  <br>  <span class="hljs-string">&quot;id&quot;</span> : <span class="hljs-string">&quot;1&quot;</span>  <br>&#125;  <br>  &#125;,  <br>  &#123;  <br><span class="hljs-string">&quot;_index&quot;</span> : <span class="hljs-string">&quot;test&quot;</span>,  <br><span class="hljs-string">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,  <br><span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;QNq5s3MBvTJiRW6OpzFr&quot;</span>,  <br><span class="hljs-string">&quot;_score&quot;</span> : 1.0,  <br><span class="hljs-string">&quot;_source&quot;</span> : &#123;  <br>  <span class="hljs-string">&quot;money&quot;</span> : 123.3656,  <br>  <span class="hljs-string">&quot;id&quot;</span> : <span class="hljs-string">&quot;2&quot;</span>  <br>&#125;  <br>  &#125;,  <br>  &#123;  <br>  <span class="hljs-string">&quot;_index&quot;</span> : <span class="hljs-string">&quot;test&quot;</span>,  <br>  <span class="hljs-string">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,  <br>  <span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;Qdq5s3MBvTJiRW6OrjEB&quot;</span>,  <br>  <span class="hljs-string">&quot;_score&quot;</span> : 1.0,  <br>  <span class="hljs-string">&quot;_source&quot;</span> : &#123;  <br><span class="hljs-string">&quot;money&quot;</span> : 89.9234,  <br><span class="hljs-string">&quot;id&quot;</span> : <span class="hljs-string">&quot;3&quot;</span>  <br>  &#125;  <br>  &#125;  <br>]  <br>  &#125;  <br>&#125;<br></code></pre></div></td></tr></table></figure><p>这才是想要的结果。从整体的实现来看，虽然功能很简单，但是一些细节的地方处理不到位，很可能就耽误你很多的时间。用这时间来摸鱼，它不香吗。</p><p>注：Elasticsearch版本是7.8.0，以上操作都是通过 <code>kibana</code> 执行的。</p><blockquote><p>相关链接：<a href="https://www.elastic.co/guide/en/elasticsearch/painless/current/painless-operators-numeric.html">https://www.elastic.co/guide/en/elasticsearch/painless/current/painless-operators-numeric.html</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Elasticsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Python获取微信好友并进行数据分析</title>
    <link href="/2019/01/01/%E4%BD%BF%E7%94%A8Python%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B%E5%B9%B6%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <url>/2019/01/01/%E4%BD%BF%E7%94%A8Python%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B%E5%B9%B6%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>最近看到微信公众号推荐了些文章，有关于用Python爬取自己的微信好友，然后做了一些分析。其实之前我也有过这样的想法，一直没去实现。刚好今天元旦，回公司写了这么一个小项目。</p><p>其实获取微信好友很简单，有现成的模块直接使用，这是 <code>itchat</code> 的官网<a href="https://itchat.readthedocs.io/zh/latest/">https://itchat.readthedocs.io/zh/latest/</a> 。首先通过 <code>pip3</code> 进行安装  </p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pip3 install itchat <br></code></pre></div></td></tr></table></figure><p>然后导入 <code>itchat</code> 模块，通过 <code>get_friends()</code> 方法获取所有微信好友，</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itchat  <br>  <br><span class="hljs-comment"># auto_login()无参数，会生成一个二维码，扫描登录；设置为True时，手机端确认登录即可  </span><br>itchat.auto_login(<span class="hljs-literal">True</span>)  <br>friends = itchat.get_friends()  <br></code></pre></div></td></tr></table></figure><p>为了后面方便数据分析，我将微信好友信息入库处理，首先创建数据库，</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table t_friends  <br>(  <br> id           int auto_increment primary key,  <br> user_name    varchar(255) null,  <br> nick_name    varchar(20)  null,  <br> remark_name  varchar(20)  null,  <br> sex          int          null,  <br> head_img_url varchar(255) null,  <br> province     varchar(20)  null,  <br> city         varchar(20)  null,  <br> signature    varchar(255) null  <br>);  <br></code></pre></div></td></tr></table></figure><p>将获取的微信好友插入数据库，</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql  <br>  <br>connect = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>,  <br>user=<span class="hljs-string">&#x27;root&#x27;</span>,  <br>password=<span class="hljs-string">&#x27;root1234&#x27;</span>,  <br>db=<span class="hljs-string">&#x27;itchat_db&#x27;</span>,  <br>charset=<span class="hljs-string">&#x27;utf8mb4&#x27;</span>)  <br>  <br>cursor = connect.cursor()  <br>  <br><span class="hljs-keyword">for</span> friend <span class="hljs-keyword">in</span> friends:  <br>  sql = <span class="hljs-string">&quot;INSERT INTO t_friends (`user_name`, `nick_name`, `remark_name`, `sex`, `head_img_url`, `province`, `city`, `Signature`) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) &quot;</span>  <br>  cursor.execute(sql, (friend[<span class="hljs-string">&#x27;UserName&#x27;</span>], friend[<span class="hljs-string">&#x27;NickName&#x27;</span>], friend[<span class="hljs-string">&#x27;RemarkName&#x27;</span>], friend[<span class="hljs-string">&#x27;Sex&#x27;</span>], friend[<span class="hljs-string">&#x27;HeadImgUrl&#x27;</span>], friend[<span class="hljs-string">&#x27;Province&#x27;</span>], friend[<span class="hljs-string">&#x27;City&#x27;</span>], friend[<span class="hljs-string">&#x27;Signature&#x27;</span>]))  <br>   <br>connect.commit()  <br>connect.close()  <br></code></pre></div></td></tr></table></figure><p>有了数据之后，就可以进行分析了。我使用的是基于图像处理库的 <code>pylab</code> 接口模块<a href="https://matplotlib.org/index.html"><code>matplotlib</code></a>，还是通过 <code>pip3</code> 进行安装，</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pip3 install matplotlib  <br></code></pre></div></td></tr></table></figure><p>先分析一下好友的男女比例，</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql  <br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt  <br>  <br>connect = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>,  <br>user=<span class="hljs-string">&#x27;root&#x27;</span>,  <br>password=<span class="hljs-string">&#x27;root1234&#x27;</span>,  <br>db=<span class="hljs-string">&#x27;itchat_db&#x27;</span>,  <br>charset=<span class="hljs-string">&#x27;utf8mb4&#x27;</span>)  <br>  <br>cursor = connect.cursor()  <br>  <br>sql = <span class="hljs-string">&quot;select case when sex = 1 then &#x27;男&#x27; when sex = 2 then &#x27;女&#x27; else &#x27;其它&#x27; end as &#x27;性别&#x27;, count(sex) from t_friends group by sex;&quot;</span>  <br>  <br>cursor.execute(sql)  <br>results = cursor.fetchall()  <br>  <br>fig, ax = plt.subplots(figsize=(<span class="hljs-number">15</span>, <span class="hljs-number">8</span>), subplot\_kw=<span class="hljs-built_in">dict</span>(aspect=<span class="hljs-string">&quot;equal&quot;</span>))  <br>  <br>data = [val[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> results]  <br>sex = [key[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> results]  <br>  <br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">pct, allvals</span>):  <br>  absolute = <span class="hljs-built_in">int</span>(pct/<span class="hljs-number">100.</span>*np.<span class="hljs-built_in">sum</span>(allvals))  <br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;:.1f&#125;%\n(&#123;:d&#125; 人)&quot;</span>.<span class="hljs-built_in">format</span>(pct, absolute)  <br>  <br>wedges, texts, autotexts = ax.pie(data, autopct=<span class="hljs-keyword">lambda</span> pct: func(pct, data), textprops=<span class="hljs-built_in">dict</span>(color=<span class="hljs-string">&quot;w&quot;</span>))  <br>  <br>ax.legend(wedges, sex, title=<span class="hljs-string">&quot;男女比例&quot;</span>, loc=<span class="hljs-string">&quot;cneter left&quot;</span>, bbox_to_anchor=(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">1</span>))  <br>  <br>plt.setp(autotexts, size=<span class="hljs-number">8</span>, weight=<span class="hljs-string">&quot;bold&quot;</span>)  <br>  <br>ax.set_title(<span class="hljs-string">&quot;微信好友男女比例分布&quot;</span>)  <br>  <br>plt.show()  <br></code></pre></div></td></tr></table></figure><p>效果展示，</p><p>![微信好友男女比例](&#x2F;images&#x2F;Screen Shot 2019-01-01 at 19.35.46.png)</p><p>然后分析一下微信好友都是分布在哪些省份和城市，</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql  <br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt  <br>  <br>connect = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>,  <br>user=<span class="hljs-string">&#x27;root&#x27;</span>,  <br>password=<span class="hljs-string">&#x27;root1234&#x27;</span>,  <br>db=<span class="hljs-string">&#x27;itchat_db&#x27;</span>,  <br>charset=<span class="hljs-string">&#x27;utf8mb4&#x27;</span>)  <br>  <br>cursor = connect.cursor()  <br>  <br><span class="hljs-comment"># 各省份人数查询SQL  </span><br>sql = <span class="hljs-string">&quot;select province, count(1) counts from t_friends where province != &#x27;&#x27; group by province order by counts desc limit 20;&quot;</span>  <br>  <br>cursor.execute(sql)  <br>results = cursor.fetchall()  <br>  <br>cities = [city[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> city <span class="hljs-keyword">in</span> results]  <br>counts = [count[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> count <span class="hljs-keyword">in</span> results]  <br>  <br>fig, axs = plt.subplots(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, figsize=(<span class="hljs-number">15</span>, <span class="hljs-number">8</span>), sharey=<span class="hljs-literal">True</span>)  <br>  <br>axs.bar(cities, counts)  <br>  <br><span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(cities, counts):  <br>  plt.text(x, y+<span class="hljs-number">0.05</span>, <span class="hljs-string">&#x27;%.0f&#x27;</span> % y, ha=<span class="hljs-string">&#x27;center&#x27;</span>, va=<span class="hljs-string">&#x27;bottom&#x27;</span>, fontsize=<span class="hljs-number">11</span>)  <br>  <br>axs.set_title(<span class="hljs-string">&#x27;微信好友所在省份前20分布&#x27;</span>)  <br>plt.show()  <br></code></pre></div></td></tr></table></figure><p>效果展示，</p><p>![微信好友所在省份前20分布](&#x2F;images&#x2F;Screen Shot 2019-01-01 at 19.36.11.png)</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql  <br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt  <br>  <br>connect = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>,  <br>user=<span class="hljs-string">&#x27;root&#x27;</span>,  <br>password=<span class="hljs-string">&#x27;root1234&#x27;</span>,  <br>db=<span class="hljs-string">&#x27;itchat_db&#x27;</span>,  <br>charset=<span class="hljs-string">&#x27;utf8mb4&#x27;</span>)  <br>  <br>cursor = connect.cursor()  <br>  <br><span class="hljs-comment"># 各城市人数查询SQL  </span><br>sql1 = <span class="hljs-string">&quot;select city, count(1) counts from t_friends where city != &#x27;&#x27; group by province, city order by counts desc limit 25;&quot;</span>  <br>  <br>cursor.execute(sql1)  <br>results1 = cursor.fetchall()  <br>  <br>cities1 = [city[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> city <span class="hljs-keyword">in</span> results1]  <br>counts1 = [count[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> count <span class="hljs-keyword">in</span> results1]  <br>  <br>fig, axs = plt.subplots(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, figsize=(<span class="hljs-number">15</span>, <span class="hljs-number">8</span>), sharey=<span class="hljs-literal">True</span>)  <br>  <br>axs.bar(cities, counts)  <br>  <br><span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(cities1, counts1):  <br>  plt.text(x, y+<span class="hljs-number">0.05</span>, <span class="hljs-string">&#x27;%.0f&#x27;</span> % y, ha=<span class="hljs-string">&#x27;center&#x27;</span>, va=<span class="hljs-string">&#x27;bottom&#x27;</span>, fontsize=<span class="hljs-number">11</span>)  <br>  <br>axs.set_title(<span class="hljs-string">&#x27;微信好友所在城市前25分布&#x27;</span>)  <br>plt.show()  <br></code></pre></div></td></tr></table></figure><p>效果展示，</p><p>![微信好友所在城市前25分布](&#x2F;images&#x2F;Screen Shot 2019-01-01 at 22.07.24.png)</p><p>通过上面的饼图和柱状图来看，我的微信好友还是以男性居多，还有部分是未知性别的，啊哈哈哈(邪恶😈)。因为我是安徽人，所以安徽人居多是肯定的啦，大部分都是我从小学到大学的同学，朋友及家人等等。然后河南人占了第二的位置，也是能理解的，毕竟从毕业后，由于工作原因在郑州待了一年，唉，还是有点想念郑州的伙伴啊。剩下的比如江苏、浙江、上海是不少人向往、打拼的城市吧。其他的话有在脸书、推特上认识的一些朋友，就不细说了。</p><p>人生很短，为了梦想加油吧！</p><hr><p><code>itchat</code> 是一个开源的微信个人号接口项目，它支持 <code>python2</code> 以及 <code>python3</code> ，很方便的扩展个人的微信号、方便自己的生活。如果你很感兴趣，那就去<a href="https://itchat.readthedocs.io/zh/latest/">官网</a>探索吧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>让SQL飞起来</title>
    <link href="/2018/12/25/%E8%AE%A9SQL%E9%A3%9E%E8%B5%B7%E6%9D%A5/"/>
    <url>/2018/12/25/%E8%AE%A9SQL%E9%A3%9E%E8%B5%B7%E6%9D%A5/</url>
    
    <content type="html"><![CDATA[<p>作为一名JAVA开发者，对SQL的使用是必不可少的，当数量级别达到一定量的时候，一个好的SQL可以让程序跑的更顺畅。最近也不是很忙，就将双十一购买的这本《SQL进阶教程》阅读了前面一部分，给我的感受就是有种醍醐灌顶的感觉，也让我对SQL有了进一步的理解，里面的知识点很好的解决了在工作中经常会遇到的问题。下面是部分内容，推荐给大家。</p><h4 id="使用高效的查询"><a href="#使用高效的查询" class="headerlink" title="使用高效的查询"></a><a href="#%E4%BD%BF%E7%94%A8%E9%AB%98%E6%95%88%E7%9A%84%E6%9F%A5%E8%AF%A2" title="使用高效的查询"></a>使用高效的查询</h4><ol><li>参数是子查询时，使用EXISTS代替IN<br>如果连接列上建立了索引，只需查询索引即可；<br>如果使用exists，那么只查到一行数据满足条件就会终止查询，不像IN会扫描全表。</li><li>参数是子查询时，使用连接代替IN</li></ol><h4 id="避免排序"><a href="#避免排序" class="headerlink" title="避免排序"></a><a href="#%E9%81%BF%E5%85%8D%E6%8E%92%E5%BA%8F" title="避免排序"></a>避免排序</h4><p>会进行排序的代表性的运算：<br><code>GROUP BY</code> 子句<br><code>ORDER BY</code> 子句<br>聚合函数（ <code>SUM</code>、<code>COUNT</code>、<code>AVG</code>、<code>MAX</code>、<code>MIN</code> ）<br><code>DISTINCT</code><br>集合运算符( <code>UNION</code>、<code>INTERSECT</code>、<code>EXCEPT</code> )<br>窗口函数（ <code>RANK</code>、<code>ROW_NUMBER</code> ）<br>尽量避免无谓的排序。</p><p>使用 <code>ALL</code> 可选项不会进行排序。</p><p>使用 <code>EXISTS</code> 代替 <code>DISTINCT</code> 。</p><p>极值函数中使用索引（ <code>MAX</code>、<code>MIN</code> ）</p><p>能写在 <code>WHERE</code> 子句里的条件不要写在 <code>HAVING</code> 子句里。<code>HAVING</code> 子句是针对聚合后生成的视图进行筛选的，但是很多时候聚合后的视图都没有继承原表的索引结构。</p><p>在 <code>GROUP BY</code> 子句和 <code>ORDER BY</code> 子句中使用索引</p><h4 id="利用索引"><a href="#利用索引" class="headerlink" title="利用索引"></a><a href="#%E5%88%A9%E7%94%A8%E7%B4%A2%E5%BC%95" title="利用索引"></a>利用索引</h4><p>使用索引时，条件表达式的左侧应该是原始字段。</p><p>指定 <code>IS NULL</code> 和 <code>IS NOT NULL</code> 会使得索引无法使用。</p><p><code>&lt;&gt;、!=、NOT IN</code> 等否定形式不能用到索引。</p><p>使用 <code>OR</code> 索引无法使用，除非是位图索引，但这会增大性能的开销。</p><p>使用联合索引时，列的顺序错误，会导致索引无法使用。如果无法保证查询条件里列的顺序与索引一致，可以将联合索引拆分为多个索引。</p><p>使用 <code>LIKE</code> 时，只有前方一致的匹配才能用到索引。如：  </p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select * from sometable where col_1 like &#x27;%a&#x27;;  -- 不会使用索引  <br>select * from sometable where col_1 like &#x27;%a%&#x27;; -- 不会使用索引  <br>select * from sometable where col_1 like &#x27;a%&#x27;;  -- 会使用索引  <br></code></pre></div></td></tr></table></figure><p>默认的类型转换不仅会增加额外的性能开销，还会导致索引不可用，在需要类型转换的时候显示地进行类型转换(转换要写在条件表达式的右边)。</p><h4 id="减少中间表"><a href="#减少中间表" class="headerlink" title="减少中间表"></a><a href="#%E5%87%8F%E5%B0%91%E4%B8%AD%E9%97%B4%E8%A1%A8" title="减少中间表"></a>减少中间表</h4><p>频繁使用中间表会带来两个问题：1.展开数据需要耗费内存资源，2.原始表中的索引不容易使用到。尽量减少中间表的使用也是提升性能的一个方法。</p><p>先进行连接再进行聚合。</p><p>合理使用视图。</p><blockquote><p>参考书籍：《SQL进阶教程》[日]MICK&#x2F;著 吴岩昌&#x2F;译</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习笔记---持久化</title>
    <link href="/2018/11/27/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <url>/2018/11/27/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>将数据从内存中以某种形式同步到硬盘中，使得重启后可以根据硬盘中的记录恢复数据，这一过程就是<strong>持久化</strong>。</p><p>Redis支持两种方式的持久化:</p><ul><li><strong>RDB</strong>方式：根据指定规则“定时”将内存中的数据存储在硬盘上；</li><li><strong>AOF</strong>方式：每次执行命令后将命令本身记录下来。</li></ul><h3 id="一、RDB方式"><a href="#一、RDB方式" class="headerlink" title="一、RDB方式"></a><a href="#%E4%B8%80%E3%80%81RDB%E6%96%B9%E5%BC%8F" title="一、RDB方式"></a>一、RDB方式</h3><p>​ <strong>RDB</strong>方式的持久化是通过<strong>快照</strong>(<strong>snapshotting</strong>)完成的，当完成一定条件时Redis会自动将内存中的所有数据生成一份副本并存储在硬盘上，这个过程称为“<strong>快照</strong>”。</p><h4 id="1-根据配置规则进行自动快照"><a href="#1-根据配置规则进行自动快照" class="headerlink" title="1.根据配置规则进行自动快照"></a><a href="#1-%E6%A0%B9%E6%8D%AE%E9%85%8D%E7%BD%AE%E8%A7%84%E5%88%99%E8%BF%9B%E8%A1%8C%E8%87%AA%E5%8A%A8%E5%BF%AB%E7%85%A7" title="1.根据配置规则进行自动快照"></a>1.根据配置规则进行自动快照</h4><p>通过 <code>redis.conf</code> 配置文件( <code>/usr/local/etc/redis.conf</code> )，我们可以看到Redis为我们预置了3个条件：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">save 900 1<span class="hljs-comment"># 在15分钟(900秒)内有一个或一个以上的键被更改则进行快照。  </span><br>save 300 10<span class="hljs-comment"># 在5分钟(300秒)内至少有10个键被更改则进行快照。  </span><br>save 60 10000<span class="hljs-comment"># 在1分钟(60秒)内至少有1000个键被更改则进行快照。  </span><br></code></pre></div></td></tr></table></figure><p>每条快照条件占一行，以 <code>save</code> 参数开头。我们可以自定义这些参数，如果符合自动快照条件，Redis会自动执行快照条件。</p><h4 id="2-用户执行SAVE或BGSAVE命令"><a href="#2-用户执行SAVE或BGSAVE命令" class="headerlink" title="2.用户执行SAVE或BGSAVE命令"></a><a href="#2-%E7%94%A8%E6%88%B7%E6%89%A7%E8%A1%8CSAVE%E6%88%96BGSAVE%E5%91%BD%E4%BB%A4" title="2.用户执行SAVE或BGSAVE命令"></a>2.用户执行SAVE或BGSAVE命令</h4><p>除了自动快照，当服务重启、手动迁移以及备份时，我们需要进行手动快照操作。</p><h5 id="1-SAVE命令"><a href="#1-SAVE命令" class="headerlink" title="1.SAVE命令"></a><a href="#1-SAVE%E5%91%BD%E4%BB%A4" title="1.SAVE命令"></a>1.SAVE命令</h5><p>当执行 <code>save</code> 命令时，Redis<strong>同步</strong>地进行快照操作，在执行快照操作中会<strong>阻塞</strong>所有来自客户端的请求。如果数据库中的数据比较多时，会导致Redis较长时间内无响应。因避免在生产环境中使用这一命令。</p><h5 id="2-BGSAVE命令-手动时推荐"><a href="#2-BGSAVE命令-手动时推荐" class="headerlink" title="2.BGSAVE命令(手动时推荐)"></a><a href="#2-BGSAVE%E5%91%BD%E4%BB%A4-%E6%89%8B%E5%8A%A8%E6%97%B6%E6%8E%A8%E8%8D%90" title="2.BGSAVE命令(手动时推荐)"></a>2.BGSAVE命令(手动时推荐)</h5><p><code>bgsave</code> 命令可以在后台<strong>异步</strong>执行快照操作，快照的同时仍可接受来自客户端的请求。执行 <code>bgsave</code> 命令后Redis立即返回 <code>OK</code> 表示开始执行快照操作，可通过 <code>LASTSAVE</code> 命令获取最近一次成功执行快照的时间。</p><h4 id="3-执行FLUSHALL命令"><a href="#3-执行FLUSHALL命令" class="headerlink" title="3.执行FLUSHALL命令"></a><a href="#3-%E6%89%A7%E8%A1%8CFLUSHALL%E5%91%BD%E4%BB%A4" title="3.执行FLUSHALL命令"></a>3.执行FLUSHALL命令</h4><p>执行 <code>flushall</code> 命令时，Redis会清楚数据库中的所有数据。但不论清楚数据库的过程是否触发了自动快照条件，<strong>只要自动快照条件不为空</strong>，Redis就会执行一次快照操作。</p><p>当<strong>没有定义自动快照条件</strong>时，执行 <code>flushall</code> 则不会进行快照。</p><h4 id="4-执行复制时"><a href="#4-执行复制时" class="headerlink" title="4.执行复制时"></a><a href="#4-%E6%89%A7%E8%A1%8C%E5%A4%8D%E5%88%B6%E6%97%B6" title="4.执行复制时"></a>4.执行复制时</h4><p>当设置<strong>主从模式</strong>时，Redis会在<strong>复制初始化</strong>时进行自动快照。即使没有定义自动快照条件和手动执行快照操作，也会生成<strong>RDB</strong>快照文件。</p><h4 id="5-快照原理"><a href="#5-快照原理" class="headerlink" title="5.快照原理"></a><a href="#5-%E5%BF%AB%E7%85%A7%E5%8E%9F%E7%90%86" title="5.快照原理"></a>5.快照原理</h4><p>快照的过程：</p><p>​ 1）Redis使用fork函数复制一份当前进程(父进程)的副本(子进程)；</p><p>​ 2）父进程继续接收并处理客户端发来的命令，而子进程开始将内存中的数据写入到硬盘中的临时文件；</p><p>​ 3）当子进程写入完所有数据后会用该临时文件<strong>替换</strong>旧的RDB文件，至此一次快照操作完成。</p><p><strong>RDB</strong>文件的路径和文件名，可以通过配置文件 <code>redis.conf</code> 中的 <code>dir</code> 和 <code>dbfilename</code> 参数来设置。</p><p>RDB文件是经过<strong>压缩</strong>(可通过配置 <code>rdbcompression</code> 参数<strong>禁用压缩</strong>，默认是开启的)的<strong>二进制格式</strong>，所以占用的空间会小于内存中的数据大小，更加利于传输。</p><p>Redis启动后会读取RDB快照文件，将数据从硬盘载入到内存中。通过RDB方式实现的持久化，若Redis出现异常，就会丢失最后一次快照以后更改的所有数据。</p><h3 id="二、AOF方式"><a href="#二、AOF方式" class="headerlink" title="二、AOF方式"></a><a href="#%E4%BA%8C%E3%80%81AOF%E6%96%B9%E5%BC%8F" title="二、AOF方式"></a>二、AOF方式</h3><p><code>AOF = Append Only File</code> ，AOF持久化可以降低进程中止导致的数据丢失；他可以将Redis执行的每一条写命令追加到硬盘文件中。</p><h4 id="1-开启AOF"><a href="#1-开启AOF" class="headerlink" title="1.开启AOF"></a><a href="#1-%E5%BC%80%E5%90%AFAOF" title="1.开启AOF"></a>1.开启AOF</h4><p>默认情况下，Redis是没有开启AOF的，可以通过配置文件进行开启：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">appendonly <span class="hljs-built_in">yes</span>  <br></code></pre></div></td></tr></table></figure><p>AOF文件的保存位置和RDB文件的位置相同，都是同过 <code>dir</code> 参数设置的，默认的文件名是 <code>appendonly.aof</code> ,可以通过 <code>appendfilename</code> 参数修改：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">appendfilename appendonly.aof  <br></code></pre></div></td></tr></table></figure><h4 id="2-AOF实现"><a href="#2-AOF实现" class="headerlink" title="2.AOF实现"></a><a href="#2-AOF%E5%AE%9E%E7%8E%B0" title="2.AOF实现"></a>2.AOF实现</h4><p>当AOF文件的大小达到一定条件时，Redis就会自动重写AOF文件，这个条件可以在配置文件中设置：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">auto-aof-rewrite-percentage 100<span class="hljs-comment"># 当目前的AOF文件大小超过上一次重写时的AOF文件大小的百分之多少时，会再次进行重写，如果之前没有重写，则以启动时的AOF文件大小为依据。  </span><br>auto-aof-rewrite-min-size 64mb<span class="hljs-comment"># 限制了允许重写的最小AOF文件大小  </span><br></code></pre></div></td></tr></table></figure><p>除了自动执行重写外，还可以手动执行AOF重写：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; bgrewriteaof  <br></code></pre></div></td></tr></table></figure><p>AOF文件和RDB文件的文件格式完全不同。</p><p>在启动Redis时会逐个执行AOF文件中的命令来将硬盘中的数据载入到内存中，载入速度相较于RDB会慢一些。</p><h4 id="3-同步硬盘数据"><a href="#3-同步硬盘数据" class="headerlink" title="3.同步硬盘数据"></a><a href="#3-%E5%90%8C%E6%AD%A5%E7%A1%AC%E7%9B%98%E6%95%B0%E6%8D%AE" title="3.同步硬盘数据"></a>3.同步硬盘数据</h4><p>在执行AOF操作时，由于操作系统的缓存机制，数据并未真正地写入硬盘，而是进入了系统的硬盘缓存中。默认情况下系统每30秒会执行一次同步操作，以便将硬盘缓存中的数据真正写入到硬盘中，如果在这期间出现异常会导致硬盘缓存中的数据丢失。这就需要通过设置参数要求系统主动将缓存内容同步要硬盘中。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># appendfsync always# 每次执行写入都会执行同步，最安全但也最慢  </span><br>appendfsync everysec<span class="hljs-comment"># 默认采用everysec规则，每秒执行一次同步操作。  </span><br><span class="hljs-comment"># appendfsync no# 不主动进行同步操作，而是交给操作系统来做(即每30秒一次)，虽快但不安全  </span><br></code></pre></div></td></tr></table></figure><p>一般情况下使用默认值everysec就够了，性能和安全都有保障。</p><p>Redis允许同时开启<strong>AOF</strong>和<strong>RDB</strong>。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习笔记---进阶篇</title>
    <link href="/2018/11/26/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
    <url>/2018/11/26/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%BF%9B%E9%98%B6%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h3 id="一、事务"><a href="#一、事务" class="headerlink" title="一、事务"></a><a href="#%E4%B8%80%E3%80%81%E4%BA%8B%E5%8A%A1" title="一、事务"></a>一、事务</h3><h4 id="1-MULTI命令"><a href="#1-MULTI命令" class="headerlink" title="1.MULTI命令"></a><a href="#1-MULTI%E5%91%BD%E4%BB%A4" title="1.MULTI命令"></a>1.MULTI命令</h4><p>Redis中的<strong>事务</strong>( <code>transaction</code> )是一组命令的集合。一个事务中的命令要么都执行，要么都不执行。Redis通过 <code>MULTI</code> 开启事务，之后的命令将被存储在等待执行的事务队列中，使用 <code>EXEC</code> 命令将等待执行的事务队列中的所有命令按照发送顺序依次执行。<code>EXEC</code> 命令的返回值就是这些命令的返回值组成的列表。返回值顺序和命令的顺序相同。  </p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; multi  <br>OK  <br>  <br>127.0.0.1:6379&gt; sadd <span class="hljs-string">&quot;user:1:following&quot;</span> 2  <br>QUEUED  <br>127.0.0.1:6379&gt; sadd <span class="hljs-string">&quot;user:2:followers&quot;</span> 1  <br>QUEUED  <br>  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">exec</span>  <br>1) (<span class="hljs-built_in">integer</span>) 1  <br>2) (<span class="hljs-built_in">integer</span>) 1  <br></code></pre></div></td></tr></table></figure><h4 id="2-错误处理"><a href="#2-错误处理" class="headerlink" title="2.错误处理"></a><a href="#2-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86" title="2.错误处理"></a>2.错误处理</h4><p>a. 语法错误。指命令不存在或者命令参数的个数不对。只要有一个命令有语法错误，执行 <code>EXEC</code> 命令之后Redis就会直接返回错误，连语法正确的命令也不会执行。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; multi  <br>OK  <br>  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> key value  <br>QUEUED  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> key  <br>(error) ERR wrong number of arguments <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;set&#x27;</span> <span class="hljs-built_in">command</span>  <br>127.0.0.1:6379&gt; errorcommand key  <br>(error) ERR unknown <span class="hljs-built_in">command</span> `errorcommand`, with args beginning with: `key`,  <br>  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">exec</span>  <br>(error) EXECABORT Transaction discarded because of previous errors.  <br></code></pre></div></td></tr></table></figure><p>b. 运行错误。如果事务里的一条命令出现了运行错误，事务里其他的命令依然会继续执行。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; multi  <br>OK  <br>  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span>  key 1  <br>QUEUED  <br>127.0.0.1:6379&gt; sadd key 2  <br>QUEUED  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> key 3  <br>QUEUED  <br>  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">exec</span>  <br>1) OK  <br>2) (error) WRONGTYPE Operation against a key holding the wrong kind of value  <br>3) OK  <br>  <br>127.0.0.1:6379&gt; get key  <br><span class="hljs-string">&quot;3&quot;</span>  <br></code></pre></div></td></tr></table></figure><blockquote><p>Redis的事务没有关系数据库事务提供的回滚( <code>rollback</code> )功能。</p></blockquote><h4 id="3-WATCH命令"><a href="#3-WATCH命令" class="headerlink" title="3.WATCH命令"></a><a href="#3-WATCH%E5%91%BD%E4%BB%A4" title="3.WATCH命令"></a>3.WATCH命令</h4><p><code>watch</code> 命令可以监控一个或多个键，一旦其中有一个键被修改(或删除)，之后的事务就不执行。监控一直持续到 <code>EXEC</code> 命令。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> key 1  <br>OK  <br>127.0.0.1:6379&gt; watch key  <br>OK  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> key 2  <br>OK  <br>127.0.0.1:6379&gt; multi  <br>OK  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> key 3  <br>QUEUED  <br>  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">exec</span>  <br>(nil)  <br>127.0.0.1:6379&gt; get key  <br><span class="hljs-string">&quot;2&quot;</span>  <br></code></pre></div></td></tr></table></figure><p>执行 <code>EXEC</code> 命令后会取消对所有键的监控，如果不想执行事务中的命令也可以使用 <code>UNWATCH</code> 命令来取消监控。</p><h3 id="二、过期时间"><a href="#二、过期时间" class="headerlink" title="二、过期时间"></a><a href="#%E4%BA%8C%E3%80%81%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4" title="二、过期时间"></a>二、过期时间</h3><h4 id="1-EXPIRE命令"><a href="#1-EXPIRE命令" class="headerlink" title="1.EXPIRE命令"></a><a href="#1-EXPIRE%E5%91%BD%E4%BB%A4" title="1.EXPIRE命令"></a>1.EXPIRE命令</h4><p>使用 <code>expire</code> 命令设置一个键的过期时间，到时间后Redis会自动删除它。</p><p><code>EXPIRE</code> 命令的使用方法为 <code>EXPIRE key seconds</code> ，其中 <code>seconds</code> 参数表示为键的过期时间，单位为 <code>秒</code> 。</p><p><code>EXPIRE</code> 命令返回 <code>1</code> 表示设置<strong>成功</strong>，返回 <code>0</code> 则表示<strong>键不存在或设置失败</strong>。</p><p><code>TTL</code> 命令可以查看一个键还有多少时间会被删除。当<strong>键不存在</strong>时 <code>TTL</code> 命令返回 <code>-2</code> ；<strong>没有为键设置过期时间</strong>返回为 <code>-1</code>.</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span>  username jenkin  <br>OK  <br>127.0.0.1:6379&gt; expire username 60  <br>(<span class="hljs-built_in">integer</span>) 1  <br>  <br>127.0.0.1:6379&gt; ttl username  <br>(<span class="hljs-built_in">integer</span>) 44  <br>  <br>127.0.0.1:6379&gt; del username  <br>(<span class="hljs-built_in">integer</span>) 1  <br>  <br>127.0.0.1:6379&gt; expire username 60  <br>(<span class="hljs-built_in">integer</span>) 0  <br>  <br>127.0.0.1:6379&gt; ttl username  <br>(<span class="hljs-built_in">integer</span>) -2  <br>  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> username jenkin  <br>OK  <br>  <br>127.0.0.1:6379&gt; ttl username  <br>(<span class="hljs-built_in">integer</span>) -1  <br></code></pre></div></td></tr></table></figure><p><code>PERSIST</code> 命令可以取消键的过期时间(即将键恢复成永久的)。如果过期时间被成功清除，则返回 <code>1</code> ，否则返回 <code>0</code> .</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> foo bar  <br>OK  <br>  <br>127.0.0.1:6379&gt; expire foo 44  <br>(<span class="hljs-built_in">integer</span>) 1  <br>  <br>127.0.0.1:6379&gt; persist foo  <br>(<span class="hljs-built_in">integer</span>) 1  <br>  <br>127.0.0.1:6379&gt; ttl foo  <br>(<span class="hljs-built_in">integer</span>) -1  <br></code></pre></div></td></tr></table></figure><p>使用 <code>set</code> 或 <code>getset</code> 命令为键赋值也会同时清除键的过期时间。</p><blockquote><p><code>EXPIRE</code> 命令的 <code>seconds</code> 参数必须是整数，最小单位是 <code>1</code> 秒。<br><code>PEXPIRE</code> 命令可以设置更精确的过期时间，最小单位是 <code>1</code> 毫秒，可以使用 <code>PTTL</code> 命令以毫秒为单位返回键的剩余时间。</p></blockquote><h4 id="2-缓存"><a href="#2-缓存" class="headerlink" title="2.缓存"></a><a href="#2-%E7%BC%93%E5%AD%98" title="2.缓存"></a>2.缓存</h4><p>通过修改配置文件 <code>/usr/local/etc/redis.conf</code> (mac系统，通过 <code>homebrew</code> 安装的Redis)的 <code>maxmemory</code> 参数，限制Redis<strong>最大可用内存大小</strong>(单位是字节)，当超出这个限制时Redis会根据 <code>maxmemory-policy</code> 参数指定的策略来删除不需要的键直到Redis占用的内存小于指定内存。默认的策略是 <code>noeviction</code> 。</p><p><code>maxmemory-policy</code> 支持的规则：</p><p>  <code>volatile-lru</code> ：使用LRU算法删除一个键(只对设置了过期时间的键)</p><p>  <code>allkeys-lru</code> ：使用LRU算法删除一个键</p><p>  <code>volatile-random</code> ：随机删除一个键(只对设置了过期时间)</p><p>  <code>allkeys-random</code> ：随机删除一个键</p><p>  <code>volatile-ttl</code> ：删除过期时间最近的一个键</p><p>  <code>noeviction</code> ：不删除键，只返回错误</p><h3 id="三、排序"><a href="#三、排序" class="headerlink" title="三、排序"></a><a href="#%E4%B8%89%E3%80%81%E6%8E%92%E5%BA%8F" title="三、排序"></a>三、排序</h3><h4 id="1-有序集合的集合操作"><a href="#1-有序集合的集合操作" class="headerlink" title="1.有序集合的集合操作"></a><a href="#1-%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%E7%9A%84%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C" title="1.有序集合的集合操作"></a>1.有序集合的集合操作</h4><p>有序集合的操作是将运算结果存入新的键中，以便后续处理。比如 <code>zinterstore</code>、<code>zunionstore</code> 等操作。如果需要直接获取运算结果，可以使用 <code>multi</code> 、<code>zinterstore</code> 、<code>zrange</code> 、<code>del</code> 和 <code>exec</code> 等命令自己实现。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; sadd num1 1 2 3  <br>(<span class="hljs-built_in">integer</span>) 3  <br>127.0.0.1:6379&gt; sadd num2 2 3 4  <br>(<span class="hljs-built_in">integer</span>) 3  <br>  <br>127.0.0.1:6379&gt; multi  <br>OK  <br>127.0.0.1:6379&gt; zinterstore d 2 num1 num2  <br>QUEUED  <br>127.0.0.1:6379&gt; zrange d 0 -1  <br>QUEUED  <br>  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">exec</span>  <br>1) (<span class="hljs-built_in">integer</span>) 2  <br>2) 1) <span class="hljs-string">&quot;2&quot;</span>  <br>   2) <span class="hljs-string">&quot;3&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="2-SORT命令"><a href="#2-SORT命令" class="headerlink" title="2.SORT命令"></a><a href="#2-SORT%E5%91%BD%E4%BB%A4" title="2.SORT命令"></a>2.SORT命令</h4><p><code>sort</code> 命令可以对列表类型、集合类型和有序集合类型键进行排序。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; lpush score 45 89 76 65 91  <br>(<span class="hljs-built_in">integer</span>) 5  <br>127.0.0.1:6379&gt; lrange score 0 -1  <br>1) <span class="hljs-string">&quot;91&quot;</span>  <br>2) <span class="hljs-string">&quot;65&quot;</span>  <br>3) <span class="hljs-string">&quot;76&quot;</span>  <br>4) <span class="hljs-string">&quot;89&quot;</span>  <br>5) <span class="hljs-string">&quot;45&quot;</span>  <br>  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">sort</span> score  <br>1) <span class="hljs-string">&quot;45&quot;</span>  <br>2) <span class="hljs-string">&quot;65&quot;</span>  <br>3) <span class="hljs-string">&quot;76&quot;</span>  <br>4) <span class="hljs-string">&quot;89&quot;</span>  <br>5) <span class="hljs-string">&quot;91&quot;</span>  <br></code></pre></div></td></tr></table></figure><p>在对有序集合类型排序时会忽略元素的分数，只针对元素自身的值进行排序。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; zadd myzset 50 2 40 3 20 1 60 5  <br>(<span class="hljs-built_in">integer</span>) 4  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">sort</span> myzset  <br>1) <span class="hljs-string">&quot;1&quot;</span>  <br>2) <span class="hljs-string">&quot;2&quot;</span>  <br>3) <span class="hljs-string">&quot;3&quot;</span>  <br>4) <span class="hljs-string">&quot;5&quot;</span>  <br></code></pre></div></td></tr></table></figure><p>除了可以对数字排列外，还可以通过 <code>ALPHA</code> 参数实现按照字典顺序排列非数字元素。</p><p>sort默认是按从小到大的顺序排列，通过 <code>DESC</code> 参数可以实现将元素按照从大到小的顺序排列。<code>LIMIT</code> 参数返回指定范围的结果。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; lpush letter a d c G B e F  <br>(<span class="hljs-built_in">integer</span>) 7  <br>  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">sort</span> letter  <br>(error) ERR One or more scores can<span class="hljs-string">&#x27;t be converted into double  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">127.0.0.1:6379&gt; sort letter alpha  </span><br><span class="hljs-string">1) &quot;B&quot;  </span><br><span class="hljs-string">2) &quot;F&quot;  </span><br><span class="hljs-string">3) &quot;G&quot;  </span><br><span class="hljs-string">4) &quot;a&quot;  </span><br><span class="hljs-string">5) &quot;c&quot;  </span><br><span class="hljs-string">6) &quot;d&quot;  </span><br><span class="hljs-string">7) &quot;e&quot;  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">127.0.0.1:6379&gt; sort letter alpha desc  </span><br><span class="hljs-string">1) &quot;e&quot;  </span><br><span class="hljs-string">2) &quot;d&quot;  </span><br><span class="hljs-string">3) &quot;c&quot;  </span><br><span class="hljs-string">4) &quot;a&quot;  </span><br><span class="hljs-string">5) &quot;G&quot;  </span><br><span class="hljs-string">6) &quot;F&quot;  </span><br><span class="hljs-string">7) &quot;B&quot;  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">127.0.0.1:6379&gt; sort letter alpha desc limit 2 4  </span><br><span class="hljs-string">1) &quot;c&quot;  </span><br><span class="hljs-string">2) &quot;a&quot;  </span><br><span class="hljs-string">3) &quot;G&quot;  </span><br><span class="hljs-string">4) &quot;F&quot;  </span><br></code></pre></div></td></tr></table></figure><h4 id="3-BY参数"><a href="#3-BY参数" class="headerlink" title="3.BY参数"></a><a href="#3-BY%E5%8F%82%E6%95%B0" title="3.BY参数"></a>3.BY参数</h4><p>语法为 <strong>BY 参考键</strong>，参考键可以是字符串类型键或者是散列类型键的某个字段(表示为<strong>键名-&gt;字段名</strong>)</p><p>如果提供了 <code>BY</code> 参数，<code>sort</code> 命令将不再依据元素自身的值进行排序，而是对每个元素使用元素的值替换参考键中的第一个 <code>*</code> 并获取其值，然后依据该值对元素排序。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; lpush l 2 1 3  <br>(<span class="hljs-built_in">integer</span>) 3  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> itemscore:1 50  <br>OK  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> itemscore:2 100  <br>OK  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> itemscore:3 -10  <br>OK  <br>  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">sort</span> l by itemscore:*  <br>1) <span class="hljs-string">&quot;3&quot;</span>  <br>2) <span class="hljs-string">&quot;1&quot;</span>  <br>3) <span class="hljs-string">&quot;2&quot;</span>  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">sort</span> l by itemscore:* desc  <br>1) <span class="hljs-string">&quot;2&quot;</span>  <br>2) <span class="hljs-string">&quot;1&quot;</span>  <br>3) <span class="hljs-string">&quot;3&quot;</span>  <br></code></pre></div></td></tr></table></figure><p>当参考键名不包含 <code>*</code> 时(即常量键名，与元素值无关)，<code>sort</code> 命令将不会执行排序操作。</p><p>如果几个元素的参考键值相同，则sort命令会再比较元素本身的值来决定元素的顺序。</p><p>当某个元素的参考键不存在时，会默认参考键值的值为 <code>0</code> .</p><h4 id="4-GET参数"><a href="#4-GET参数" class="headerlink" title="4.GET参数"></a><a href="#4-GET%E5%8F%82%E6%95%B0" title="4.GET参数"></a>4.GET参数</h4><p><code>get</code> 参数不影响排序，他的作用是使 <code>sort</code> 命令的返回结果不再是元素自身的值，而是 <code>GET</code> 参数中指定的键值。<code>get</code> 参数也支持<strong>字符串类型和散列类型</strong>的键，并使用 <code>*</code> 作为占位符。有 <code>N</code> 个get参数，每个元素返回的结果就有 <code>N</code> 行。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">sort</span> tag:ruby:posts by post:*-&gt;time desc get post:*-&gt;title get post:*-&gt;time get <span class="hljs-comment">#  </span><br>1) <span class="hljs-string">&quot;Windows 8 app designs&quot;</span>  <br>2) <span class="hljs-string">&quot;1345667878&quot;</span>  <br>3) <span class="hljs-string">&quot;12&quot;</span>  <br>4) <span class="hljs-string">&quot;Uses for cURL&quot;</span>  <br>5) <span class="hljs-string">&quot;1345667877&quot;</span>  <br>6) <span class="hljs-string">&quot;12&quot;</span>  <br>7) <span class="hljs-string">&quot;The nature of ruby&quot;</span>  <br>8) <span class="hljs-string">&quot;1345667876&quot;</span>  <br>9) <span class="hljs-string">&quot;6&quot;</span> <br></code></pre></div></td></tr></table></figure><blockquote><p>get # 会返回元素本身的值</p></blockquote><h4 id="5-STORE参数"><a href="#5-STORE参数" class="headerlink" title="5.STORE参数"></a><a href="#5-STORE%E5%8F%82%E6%95%B0" title="5.STORE参数"></a>5.STORE参数</h4><p>默认下 <code>SORT</code> 会直接返回排序结果，如果希望保存排序结果，可以使用 <code>STORE</code> 参数。保存后的键的类型为列表类型，如果键已经存在则会覆盖它。加上 <code>store</code> 参数后 <code>sort</code> 命令返回的是结果的个数。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">sort</span> tag:ruby:posts by post:*-&gt;time desc get post:*-&gt;title get post:*-&gt;time get <span class="hljs-comment"># store sort.result  </span><br>(<span class="hljs-built_in">integer</span>) 9  <br>  <br>127.0.0.1:6379&gt; lrange sort.list 0 -1  <br>1) <span class="hljs-string">&quot;Windows 8 app designs&quot;</span>  <br>2) <span class="hljs-string">&quot;1345667878&quot;</span>  <br>3) <span class="hljs-string">&quot;12&quot;</span>  <br>4) <span class="hljs-string">&quot;Uses for cURL&quot;</span>  <br>5) <span class="hljs-string">&quot;1345667877&quot;</span>  <br>6) <span class="hljs-string">&quot;12&quot;</span>  <br>7) <span class="hljs-string">&quot;The nature of ruby&quot;</span>  <br>8) <span class="hljs-string">&quot;1345667876&quot;</span>  <br>9) <span class="hljs-string">&quot;6&quot;</span> <br></code></pre></div></td></tr></table></figure><blockquote><p><code>STORE</code> 参数常用来结合 <code>EXPIRE</code> 命令缓存排序结果。</p></blockquote><h4 id="6-性能优化"><a href="#6-性能优化" class="headerlink" title="6.性能优化"></a><a href="#6-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96" title="6.性能优化"></a>6.性能优化</h4><p><code>SORT</code> 命令的<strong>时间复杂度</strong>是<strong>O(n+mlog(m))</strong>,其中 <code>n</code> 表示要排序的列表中的元素个数，<code>m</code> 表示要返回的元素个数。</p><p>使用 <code>SORT</code> 命令时需注意几点：</p><p>①尽可能减少待排序键中元素的数量(使N尽可能小)。</p><p>②使用 <code>LIMIT</code> 参数只获取需要的数据(使M尽可能小)。</p><p>③如果要排序的数据数量较大，尽可能使用 <code>STORE</code> 参数将结果缓存。</p><h3 id="四、消息通知"><a href="#四、消息通知" class="headerlink" title="四、消息通知"></a><a href="#%E5%9B%9B%E3%80%81%E6%B6%88%E6%81%AF%E9%80%9A%E7%9F%A5" title="四、消息通知"></a>四、消息通知</h3><h4 id="1-任务队列"><a href="#1-任务队列" class="headerlink" title="1.任务队列"></a><a href="#1-%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97" title="1.任务队列"></a>1.任务队列</h4><p>使用任务队列的好处：</p><p>​ ①松耦合：生产者和消费者无需知道彼此的实现细节，只需要约定好任务的描述格式。</p><p>​ ②易于扩展：消费者可以有多个，而且可以分布在不同服务器中，也能降低单台服务器的负载。</p><h4 id="2-使用Redis实现任务队列"><a href="#2-使用Redis实现任务队列" class="headerlink" title="2.使用Redis实现任务队列"></a><a href="#2-%E4%BD%BF%E7%94%A8Redis%E5%AE%9E%E7%8E%B0%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97" title="2.使用Redis实现任务队列"></a>2.使用Redis实现任务队列</h4><p>通过使用 <code>LPUSH</code> 和 <code>RPOP</code> 命令就可实现队列的概念。如果要实现任务队列，只需要让生产者将任务使用 <code>LPUSH</code> 命令加入到某个键中，另一个边让消费者不断地使用 <code>RPOP</code> 命令从改建中取出任务即可。</p><p><code>BRPOP</code> 命令与 <code>RPOP</code> 命令相似，区别在于当列表中没有元素时 <code>BRPOP</code> 命令会一直阻塞住连接，直到有新的元素加入。</p><p><code>BRPOP</code> 命令接收两个参数：第一个是键名，第二个是超时时间，单位是秒，当超过此时间仍然没有获得新元素的话就会返回 <code>nil</code> 。超时时间为 <code>0</code> ，表示不限制等待时间，即如果没有新元素加入列表就会永远阻塞下去。</p><h4 id="3-队列优先级"><a href="#3-队列优先级" class="headerlink" title="3.队列优先级"></a><a href="#3-%E9%98%9F%E5%88%97%E4%BC%98%E5%85%88%E7%BA%A7" title="3.队列优先级"></a>3.队列优先级</h4><p><code>BRPOP</code> 命令可以同时接收多个键，意义是同时检测多个键，如果所有键都没有元素则阻塞，如果其中有一个键有元素则会从该键中弹出元素。</p><p>如果多个建都有元素则按照<strong>从左到右</strong>的顺序取第一个键中的一个元素。</p><h4 id="4-”发布-x2F-订阅”模式"><a href="#4-”发布-x2F-订阅”模式" class="headerlink" title="4.”发布&#x2F;订阅”模式"></a><a href="#4-%E2%80%9D%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E2%80%9D%E6%A8%A1%E5%BC%8F" title="4.”发布/订阅”模式"></a>4.”发布&#x2F;订阅”模式</h4><p>”<strong>发布&#x2F;订阅“</strong>模式中包含两种角色，分别是 <code>发布者</code> 和 <code>订阅者</code> 。订阅者可以订阅一个或若干个频道( <code>channel</code> )，而发布者可以向指定的频道发送消息，所有订阅此频道的订阅者都会收到此消息。</p><ol><li><p>发布者发布消息的命令是 <code>PUBLISH</code> ，用法是 <code>PUBLISH channel message</code> 。发出去的消息不会被持久化，也就是说当有客户端订阅channel后只能收到后续发布到该频道的消息，之前发送的就收不到了。</p></li><li><p>订阅频道的命令是 <code>SUBSCRIBE</code> ，可以同时订阅多个频道，用法是 <code>SUBSCRIBE channel [channel…]</code> 。</p></li><li><p><code>UNSUBSCRIBE</code> 命令可以取消订阅指定的频道，如果不指定频道则会取消订阅所有频道。</p></li></ol><h4 id="5-按照规则订阅"><a href="#5-按照规则订阅" class="headerlink" title="5.按照规则订阅"></a><a href="#5-%E6%8C%89%E7%85%A7%E8%A7%84%E5%88%99%E8%AE%A2%E9%98%85" title="5.按照规则订阅"></a>5.按照规则订阅</h4><p>使用 <code>PSUBSCRIBE</code> 命令可以订阅指定的规则。</p><p><code>PUNSUBSCRIBE</code> 命令可以退订指定的规则，如果没有参数则会退订所有规则。</p><blockquote><p>使用 <code>PUNSUBSCRIBE</code> 命令只能退订通过 <code>PSUBSCRIBE</code> 命令订阅的规则，不会影响直接通过 <code>SUBSCRIBE</code> 命令订阅的频道。<code>UNSUBSCRIBE</code> 命令也不会影响通过 <code>PSUBSCRIBE</code> 命令订阅的规则。</p></blockquote><h3 id="五、管道"><a href="#五、管道" class="headerlink" title="五、管道"></a><a href="#%E4%BA%94%E3%80%81%E7%AE%A1%E9%81%93" title="五、管道"></a>五、管道</h3><p>不管是客户端向Redis发送命令还是Redis向客户端返回命令的执行结果，都需要经过网络传输，这两个部分的总耗时称为<strong>往返时延</strong>。</p><p>Redis的底层通信协议对<strong>管道</strong>( <code>pipelining</code> )提供了支持。通过管道可以一次性发送多条命令并在执行完后一次性将结果返回，当一组命令中每条命令都不依赖于之前命令的执行结果时就可以将这组命令一起通过管道发出。管道通过减少客户端与Redis的通信次数来实现降低往返时延累计值的目的。</p><h3 id="六、节省空间"><a href="#六、节省空间" class="headerlink" title="六、节省空间"></a><a href="#%E5%85%AD%E3%80%81%E8%8A%82%E7%9C%81%E7%A9%BA%E9%97%B4" title="六、节省空间"></a>六、节省空间</h3><h4 id="1-精简键名和键值"><a href="#1-精简键名和键值" class="headerlink" title="1.精简键名和键值"></a><a href="#1-%E7%B2%BE%E7%AE%80%E9%94%AE%E5%90%8D%E5%92%8C%E9%94%AE%E5%80%BC" title="1.精简键名和键值"></a>1.精简键名和键值</h4><h4 id="2-内部编码优化"><a href="#2-内部编码优化" class="headerlink" title="2.内部编码优化"></a><a href="#2-%E5%86%85%E9%83%A8%E7%BC%96%E7%A0%81%E4%BC%98%E5%8C%96" title="2.内部编码优化"></a>2.内部编码优化</h4>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习笔记---数据类型</title>
    <link href="/2018/10/29/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2018/10/29/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a><a href="#%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4" title="基础命令"></a>基础命令</h3><p><a href="https://redis.io/"><strong>Redis</strong></a> 是 <code>REmote DIctionary Server</code> (远程字典服务器)的缩写，它以 <code>字典结构</code> 存储数据。现在我们来学习它的五种键值数据类型。学习之前先来了解几个基础命令。</p><p>先开启Redis服务：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ redis-server  <br></code></pre></div></td></tr></table></figure><p>接着开启Redis客户端：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ redis-cli  <br></code></pre></div></td></tr></table></figure><p>获取所有键：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; KEYS *  <br></code></pre></div></td></tr></table></figure><blockquote><p>Redis不区分大小写</p></blockquote><p>判断一个键是否存在, <code>1</code> 表示存在，<code>0</code> 表示不存在：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; EXISTS key  <br></code></pre></div></td></tr></table></figure><p>删除键，可以删除一个或多个键，返回值是删除键的个数：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; DEL key1 key2 key3  <br></code></pre></div></td></tr></table></figure><p>获取键的类型：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; TYPE key  <br></code></pre></div></td></tr></table></figure><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B" title="字符串类型"></a>字符串类型</h3><p>它能存储任何类型的字符串，包括二进制数据。一个字符串类型键允许存储的数据的最大容量是 <code>512MB</code> 。</p><h4 id="赋值与取值"><a href="#赋值与取值" class="headerlink" title="赋值与取值"></a><a href="#%E8%B5%8B%E5%80%BC%E4%B8%8E%E5%8F%96%E5%80%BC" title="赋值与取值"></a>赋值与取值</h4><p>当键不存在时，会返回空结果</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> key hello  <br>OK  <br>  <br>127.0.0.1:6379&gt; get key  <br><span class="hljs-string">&quot;hello&quot;</span>  <br>  <br>127.0.0.1:6379&gt; get name  <br>(nil)  <br></code></pre></div></td></tr></table></figure><h4 id="递增数字"><a href="#递增数字" class="headerlink" title="递增数字"></a><a href="#%E9%80%92%E5%A2%9E%E6%95%B0%E5%AD%97" title="递增数字"></a>递增数字</h4><p>当要操作的键不存在时会默认键值为 <code>0</code> ，所以第一次递增后的结果是 <code>1</code> ，当键值不是整数时Redis会提示错误：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> age 23  <br>OK  <br>  <br>127.0.0.1:6379&gt; incr age  <br>(<span class="hljs-built_in">integer</span>) 24  <br>  <br>127.0.0.1:6379&gt; incr num  <br>(<span class="hljs-built_in">integer</span>) 1  <br>  <br>127.0.0.1:6379&gt; incr num  <br>(<span class="hljs-built_in">integer</span>) 2  <br>  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> foo lorem  <br>OK  <br>  <br>127.0.0.1:6379&gt; incr foo  <br>(error) ERR value is not an <span class="hljs-built_in">integer</span> or out of range  <br></code></pre></div></td></tr></table></figure><h4 id="增加指定的整数"><a href="#增加指定的整数" class="headerlink" title="增加指定的整数"></a><a href="#%E5%A2%9E%E5%8A%A0%E6%8C%87%E5%AE%9A%E7%9A%84%E6%95%B4%E6%95%B0" title="增加指定的整数"></a>增加指定的整数</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; incrby age 10  <br>(<span class="hljs-built_in">integer</span>) 34  <br></code></pre></div></td></tr></table></figure><h4 id="减少指定的整数"><a href="#减少指定的整数" class="headerlink" title="减少指定的整数"></a><a href="#%E5%87%8F%E5%B0%91%E6%8C%87%E5%AE%9A%E7%9A%84%E6%95%B4%E6%95%B0" title="减少指定的整数"></a>减少指定的整数</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; decr age   <br>(<span class="hljs-built_in">integer</span>) 33  <br>  <br>127.0.0.1:6379&gt; decrby age 6  <br>(<span class="hljs-built_in">integer</span>) 27  <br></code></pre></div></td></tr></table></figure><h4 id="增加指定浮点数"><a href="#增加指定浮点数" class="headerlink" title="增加指定浮点数"></a><a href="#%E5%A2%9E%E5%8A%A0%E6%8C%87%E5%AE%9A%E6%B5%AE%E7%82%B9%E6%95%B0" title="增加指定浮点数"></a>增加指定浮点数</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; incrbyfloat score 2.7  <br><span class="hljs-string">&quot;2.7&quot;</span>  <br>  <br>127.0.0.1:6379&gt; incrbyfloat score 5E+4  <br><span class="hljs-string">&quot;50002.69999999999999929&quot;</span>  <br></code></pre></div></td></tr></table></figure><h4 id="向尾部增加值"><a href="#向尾部增加值" class="headerlink" title="向尾部增加值"></a><a href="#%E5%90%91%E5%B0%BE%E9%83%A8%E5%A2%9E%E5%8A%A0%E5%80%BC" title="向尾部增加值"></a>向尾部增加值</h4><p><code>APPEND</code> 作用是向键值的末尾追加 <code>value</code> 。如果键不存在则将该键的值设置为 <code>value</code> ，返回值是追加后字符串的总长度。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; append name <span class="hljs-string">&#x27;jenkin&#x27;</span>  <br>(<span class="hljs-built_in">integer</span>) 6  <br>  <br>127.0.0.1:6379&gt; append name <span class="hljs-string">&#x27; wang&#x27;</span>  <br>(<span class="hljs-built_in">integer</span>) 11  <br>  <br>127.0.0.1:6379&gt; get name   <br><span class="hljs-string">&quot;jenkin wang&quot;</span>  <br></code></pre></div></td></tr></table></figure><h4 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a><a href="#%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6" title="获取字符串长度"></a>获取字符串长度</h4><p><code>STRLEN</code> 命令返回键值的长度，如果键不存在则返回 <code>0</code> 。UTF-8编码的每个中文汉字的长度都是 <code>3</code> ，本例中则会返回 <code>6</code> .</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; strlen name  <br>(<span class="hljs-built_in">integer</span>) 11  <br>  <br>127.0.0.1:6379&gt; strlen ping  <br>(<span class="hljs-built_in">integer</span>) 0  <br>  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> key 你好  <br>OK  <br>  <br>127.0.0.1:6379&gt; strlen key  <br>(<span class="hljs-built_in">integer</span>) 6  <br></code></pre></div></td></tr></table></figure><h4 id="同时获得-x2F-设置多个键值"><a href="#同时获得-x2F-设置多个键值" class="headerlink" title="同时获得&#x2F;设置多个键值"></a><a href="#%E5%90%8C%E6%97%B6%E8%8E%B7%E5%BE%97-%E8%AE%BE%E7%BD%AE%E5%A4%9A%E4%B8%AA%E9%94%AE%E5%80%BC" title="同时获得/设置多个键值"></a>同时获得&#x2F;设置多个键值</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; mset name <span class="hljs-string">&#x27;jenkin&#x27;</span> age 24 email <span class="hljs-string">&#x27;mark94@live.cn&#x27;</span>  <br>OK  <br>  <br>127.0.0.1:6379&gt; mget name age email  <br>1) <span class="hljs-string">&quot;jenkin&quot;</span>  <br>2) <span class="hljs-string">&quot;24&quot;</span>  <br>3) <span class="hljs-string">&quot;mark94@live.cn&quot;</span>  <br></code></pre></div></td></tr></table></figure><h4 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a><a href="#%E4%BD%8D%E6%93%8D%E4%BD%9C" title="位操作"></a>位操作</h4><p><code>GETBIT key offset</code> ：获得一个字符串类型键指定位置的二进制位的值( <code>0</code> 或 <code>1</code> )，索引从0开始，如果获取的二进制位的索引超出了键值的二进制实际长度，则默认位值是 <code>0</code><br><code>SETBIT key offset value</code> ：设置字符串类型建指定位值的二进制位的值，返回的是该位置的旧值<br><code>BITCOUNT key [start] [end]</code> ：获得字符串类型键中值是1的二进制位个数，可通过参数来限制统计的字节范围<br><code>BITOP operation destkey key [key …]</code> ：可以对多个字符串类型键进行位运算，并将结果存储在 <code>destkey</code> 参数指定的键中，<code>BITOP</code> 支持的运算操作有 <code>AND</code> 、<code>OR</code> 、<code>XOR</code> 、<code>NOT</code></p><blockquote><p>​ b a r</p><p>ASCII 98 97 114</p><p>二进制 01100010 01100001 01110010</p><p>​ a a r</p><p>ASCII 98 97 114</p><p>二进制 01100001 01100001 01110010</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> foo bar  <br>OK  <br>  <br>127.0.0.1:6379&gt; getbit foo 0  <br>(<span class="hljs-built_in">integer</span>) 0  <br>  <br>127.0.0.1:6379&gt; getbit foo 6  <br>(<span class="hljs-built_in">integer</span>) 1  <br>  <br>127.0.0.1:6379&gt; getbit foo 1000  <br>(<span class="hljs-built_in">integer</span>) 0  <br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; setbit foo 2 0  <br>(<span class="hljs-built_in">integer</span>) 1  <br>  <br>127.0.0.1:6379&gt; get foo  <br><span class="hljs-string">&quot;Bar&quot;</span>  <br></code></pre></div></td></tr></table></figure><blockquote><p>如果要设置的位置超过了键值的二进制位的长度，<code>SETBIT</code> 会自动将中间的二进制位设置为 <code>0</code> ，同理设置一个不存在的键的指定二进制位的值会自动将其前面的位赋值为 <code>0</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; bitcount foo  <br>(<span class="hljs-built_in">integer</span>) 10  <br>  <br>127.0.0.1:6379&gt; bitcount foo 0 1  <br>(<span class="hljs-built_in">integer</span>) 6  <br>  <br>127.0.0.1:6379&gt; bitcount foo 1 2  <br>(<span class="hljs-built_in">integer</span>) 7  <br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> foo1 bar  <br>OK  <br>  <br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> foo2 aar  <br>OK  <br>  <br>127.0.0.1:6379&gt; bitop or dest foo1 foo2  <br>(<span class="hljs-built_in">integer</span>) 3  <br>  <br>127.0.0.1:6379&gt; get dest  <br><span class="hljs-string">&quot;car&quot;</span>  <br></code></pre></div></td></tr></table></figure><h3 id="散列类型"><a href="#散列类型" class="headerlink" title="散列类型"></a><a href="#%E6%95%A3%E5%88%97%E7%B1%BB%E5%9E%8B" title="散列类型"></a>散列类型</h3><p>散列类型的键值也是一种字典结构，其存储了字段和字段值的映射，但字段值只能是字符串，不支持其他数据类型。散列类型不能嵌套其它的数据类型。一个散列类型键可以包含至多 <code>2^32-1</code> 个字段。</p><blockquote><p>除了散列类型，Redis的其他数据类型同样不支持数据类型嵌套，比如集合类型的每个元素都只能是字符串，不能是另一个集合或散列表等</p></blockquote><h4 id="赋值与取值-1"><a href="#赋值与取值-1" class="headerlink" title="赋值与取值"></a><a href="#%E8%B5%8B%E5%80%BC%E4%B8%8E%E5%8F%96%E5%80%BC-1" title="赋值与取值"></a>赋值与取值</h4><p><code>HSET key field value</code> ：不区分插入和更新操作，当执行的是插入操作时(即之前字段不存在) <code>HSET</code> 命令会返回 <code>1</code> ，当执行的是更新操作时(即之前字段已经存在) <code>HSET</code> 命令会返回 <code>0</code> .当键本身不存在时，<code>HSET</code> 命令还会自动创建它。<br><code>HGET key field</code>:<br><code>HMSET key field value [field value …]</code> ：同时设置多个字段的值<br><code>HMGET key field [field …]</code>：<br><code>HGETALL key</code> : 获取键中所有的字段和字段值。很多语言的Redis客户端会将 <code>HGETALL</code> 的返回结果封装成编程语言中的对象。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; hset car price 500  <br>(<span class="hljs-built_in">integer</span>) 1  <br>  <br>127.0.0.1:6379&gt; hset car name BMW  <br>(<span class="hljs-built_in">integer</span>) 1  <br>  <br>127.0.0.1:6379&gt; hget car name   <br><span class="hljs-string">&quot;BMW&quot;</span>  <br>  <br>127.0.0.1:6379&gt; hmset student name jenkin age 24 score 100  <br>OK  <br>  <br>127.0.0.1:6379&gt; hmget student name age score  <br>1) <span class="hljs-string">&quot;jenkin&quot;</span>  <br>2) <span class="hljs-string">&quot;24&quot;</span>  <br>3) <span class="hljs-string">&quot;100&quot;</span>  <br>  <br>127.0.0.1:6379&gt; hgetall student  <br>1) <span class="hljs-string">&quot;name&quot;</span>  <br>2) <span class="hljs-string">&quot;jenkin&quot;</span>  <br>3) <span class="hljs-string">&quot;age&quot;</span>  <br>4) <span class="hljs-string">&quot;24&quot;</span>  <br>5) <span class="hljs-string">&quot;score&quot;</span>  <br>6) <span class="hljs-string">&quot;100&quot;</span>  <br></code></pre></div></td></tr></table></figure><h4 id="判断字段是否存在"><a href="#判断字段是否存在" class="headerlink" title="判断字段是否存在"></a><a href="#%E5%88%A4%E6%96%AD%E5%AD%97%E6%AE%B5%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8" title="判断字段是否存在"></a>判断字段是否存在</h4><p><code>HEXISTS key field</code> ：如果存在则返回 <code>1</code>，否则返回 <code>0</code> (如果键不存在也会返回 <code>0</code>)。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; hexists car price  <br>(<span class="hljs-built_in">integer</span>) 1  <br>  <br>127.0.0.1&gt;6379&gt; hexists car brand  <br>(<span class="hljs-built_in">integer</span>) 0  <br></code></pre></div></td></tr></table></figure><h4 id="当字段不存在时赋值"><a href="#当字段不存在时赋值" class="headerlink" title="当字段不存在时赋值"></a><a href="#%E5%BD%93%E5%AD%97%E6%AE%B5%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%97%B6%E8%B5%8B%E5%80%BC" title="当字段不存在时赋值"></a>当字段不存在时赋值</h4><p><code>HSETNX key field value</code> ：如果字段已经存在，<code>HSETNX</code> 命令将不执行任何操作。<code>HSETNX</code> 命令是原子操作，不用担心竞态条件。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; hgetall car  <br>1) <span class="hljs-string">&quot;price&quot;</span>  <br>2) <span class="hljs-string">&quot;500&quot;</span>  <br>3) <span class="hljs-string">&quot;name&quot;</span>  <br>4) <span class="hljs-string">&quot;BMW&quot;</span>  <br>  <br>127.0.0.1:6379&gt; hsetnx car price 1000  <br>(<span class="hljs-built_in">integer</span>) 0  <br>  <br>127.0.0.1:6379&gt; hget car price  <br><span class="hljs-string">&quot;500&quot;</span>  <br>  <br>127.0.0.1:6379&gt; hsetnx car place China  <br>(<span class="hljs-built_in">integer</span>) 1  <br>  <br>127.0.0.1:6379&gt; hgetall car   <br>1) <span class="hljs-string">&quot;price&quot;</span>  <br>2) <span class="hljs-string">&quot;500&quot;</span>  <br>3) <span class="hljs-string">&quot;name&quot;</span>  <br>4) <span class="hljs-string">&quot;BMW&quot;</span>  <br>5) <span class="hljs-string">&quot;place&quot;</span>  <br>6) <span class="hljs-string">&quot;China&quot;</span>  <br></code></pre></div></td></tr></table></figure><h4 id="增加数字"><a href="#增加数字" class="headerlink" title="增加数字"></a><a href="#%E5%A2%9E%E5%8A%A0%E6%95%B0%E5%AD%97" title="增加数字"></a>增加数字</h4><p><code>HINCRBY key field increment</code>：返回值是增值后的字段值。如果该键不存在，会自动增加该键。散列类型没有 <code>HINCR</code> 命令.</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; hincrby car price 200  <br>(<span class="hljs-built_in">integer</span>) 700  <br></code></pre></div></td></tr></table></figure><h4 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a><a href="#%E5%88%A0%E9%99%A4%E5%AD%97%E6%AE%B5" title="删除字段"></a>删除字段</h4><p><code>HDEL key field [field …]</code>：可以删除一个或多个字段，返回值是被删除的字段个数。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; hdel car price  <br>(<span class="hljs-built_in">integer</span>) 1  <br>  <br>127.0.0.1:6379&gt; hdel car price  <br>(<span class="hljs-built_in">integer</span>) 0  <br></code></pre></div></td></tr></table></figure><h4 id="只获取字段名或字段值"><a href="#只获取字段名或字段值" class="headerlink" title="只获取字段名或字段值"></a><a href="#%E5%8F%AA%E8%8E%B7%E5%8F%96%E5%AD%97%E6%AE%B5%E5%90%8D%E6%88%96%E5%AD%97%E6%AE%B5%E5%80%BC" title="只获取字段名或字段值"></a>只获取字段名或字段值</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; hkeys car  <br>1) <span class="hljs-string">&quot;name&quot;</span>  <br>2) <span class="hljs-string">&quot;place&quot;</span>  <br>  <br>127.0.0.1:6379&gt; hvals car  <br>1) <span class="hljs-string">&quot;BMW&quot;</span>  <br>2) <span class="hljs-string">&quot;China&quot;</span>  <br></code></pre></div></td></tr></table></figure><h4 id="获取字段数量"><a href="#获取字段数量" class="headerlink" title="获取字段数量"></a><a href="#%E8%8E%B7%E5%8F%96%E5%AD%97%E6%AE%B5%E6%95%B0%E9%87%8F" title="获取字段数量"></a>获取字段数量</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; hlen car   <br>(<span class="hljs-built_in">integer</span>) 2  <br></code></pre></div></td></tr></table></figure><h3 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a><a href="#%E5%88%97%E8%A1%A8%E7%B1%BB%E5%9E%8B" title="列表类型"></a>列表类型</h3><p>列表类型可以存储一个有序的字符串列表，常用的操作是向列表两端添加元素或者获得列表的某一个片段。列表类型内部是使用 <code>双向链表</code> 实现的，向列表两端添加元素的时间复杂度为 <code>O(1)</code> ，获取越接近两端的元素越快。一个列表类型键最多能容纳 <code>2^32-1</code> 个元素。</p><h4 id="向列表两端增加元素"><a href="#向列表两端增加元素" class="headerlink" title="向列表两端增加元素"></a><a href="#%E5%90%91%E5%88%97%E8%A1%A8%E4%B8%A4%E7%AB%AF%E5%A2%9E%E5%8A%A0%E5%85%83%E7%B4%A0" title="向列表两端增加元素"></a>向列表两端增加元素</h4><p><code>LPUSH key value [value …]</code> ：向列表左边增加元素，返回值表示增加元素后列表的长度。<br><code>RPUSH key value [value …]</code> ：向列表右边增加元素，返回值表示增加元素后列表的长度。</p><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; lpush numbers <span class="hljs-number">1</span>  <br>(integer) <span class="hljs-number">1</span>  <br>  <br><span class="hljs-number">127.0.0.1:6379</span>&gt; lpush numbers <span class="hljs-number">2</span> <span class="hljs-number">3</span>  <br>(integer) <span class="hljs-number">4</span>  <br>  <br><span class="hljs-number">127.0.0.1:6379</span>&gt; rpush numbers <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>  <br>(integer) <span class="hljs-number">7</span>  <br></code></pre></div></td></tr></table></figure><h4 id="向列表两端弹出元素"><a href="#向列表两端弹出元素" class="headerlink" title="向列表两端弹出元素"></a><a href="#%E5%90%91%E5%88%97%E8%A1%A8%E4%B8%A4%E7%AB%AF%E5%BC%B9%E5%87%BA%E5%85%83%E7%B4%A0" title="向列表两端弹出元素"></a>向列表两端弹出元素</h4><p><code>LPOP key</code> ：从列表左边弹出一个元素(将列表左边的元素从列表中移除，并返回被移除的元素值)<br><code>RPOP key</code> ：从列表右边弹出一个元素(将列表右边的元素从列表中移除，并返回被移除的元素值)</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; lpop numbers  <br><span class="hljs-string">&quot;4&quot;</span>  <br>  <br>127.0.0.1：6379&gt; rpop numbers  <br><span class="hljs-string">&quot;9&quot;</span>  <br></code></pre></div></td></tr></table></figure><h4 id="获取列表中元素的个数"><a href="#获取列表中元素的个数" class="headerlink" title="获取列表中元素的个数"></a><a href="#%E8%8E%B7%E5%8F%96%E5%88%97%E8%A1%A8%E4%B8%AD%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%AA%E6%95%B0" title="获取列表中元素的个数"></a>获取列表中元素的个数</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6279&gt; llen numbers  <br>(<span class="hljs-built_in">integer</span>) 5  <br></code></pre></div></td></tr></table></figure><blockquote><p><code>LLEN</code> 命令的功能类似SQL语句 <code>SELELCT COUNT(*) FROM table_name</code> ，但 <code>LLEN</code> 的时间复杂度为 <code>O(1)</code> 。</p></blockquote><h4 id="获得列表片段"><a href="#获得列表片段" class="headerlink" title="获得列表片段"></a><a href="#%E8%8E%B7%E5%BE%97%E5%88%97%E8%A1%A8%E7%89%87%E6%AE%B5" title="获得列表片段"></a>获得列表片段</h4><p><code>LRANGE key start stop</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; lrange numbers 0 3  <br>1) <span class="hljs-string">&quot;3&quot;</span>  <br>2) <span class="hljs-string">&quot;2&quot;</span>  <br>3) <span class="hljs-string">&quot;1&quot;</span>  <br>4) <span class="hljs-string">&quot;7&quot;</span>  <br>  <br>127.0.0.1:6379&gt; lrange numbers -2 -1  <br>1) <span class="hljs-string">&quot;7&quot;</span>  <br>2) <span class="hljs-string">&quot;8&quot;</span>  <br>  <br>127.0.0.1:6379&gt; lrange numbers 9 10  <br>(empty list or <span class="hljs-built_in">set</span>)  <br>  <br>127.0.0.1:6379&gt; lrange numbers 1 999  <br>1) <span class="hljs-string">&quot;2&quot;</span>  <br>2) <span class="hljs-string">&quot;1&quot;</span>  <br>3) <span class="hljs-string">&quot;7&quot;</span>  <br>4) <span class="hljs-string">&quot;8&quot;</span>  <br></code></pre></div></td></tr></table></figure><blockquote><p>如果 <code>start</code> 的索引位置比 <code>stop</code> 的索引位置靠后，则会返回空列表；</p><p>如果 <code>stop</code> 大于实际的索引范围，则会返回到列表左右边的元素。</p></blockquote><h4 id="删除列表中指定的值"><a href="#删除列表中指定的值" class="headerlink" title="删除列表中指定的值"></a><a href="#%E5%88%A0%E9%99%A4%E5%88%97%E8%A1%A8%E4%B8%AD%E6%8C%87%E5%AE%9A%E7%9A%84%E5%80%BC" title="删除列表中指定的值"></a>删除列表中指定的值</h4><p><code>LREM key count value</code> ：删除列表中前 <code>count</code> 个值为 <code>value</code> 的元素，返回值是实际删除的元素。<br>1.当 <code>count &gt; 0</code> 时，<code>LREM</code> 命令会从列表左边开始删除前 <code>count</code> 个值为 <code>value</code> 的元素；<br>2.当 <code>count &lt; 0</code> 时，<code>LREM</code> 命令会从列表右边开始删除前 <code>|count|</code> 个值为 <code>value</code> 的元素；<br>3.当 <code>count = 0</code> 时，<code>LREM</code> 命令会删除所有值为 <code>value</code> 的元素。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; lrange numbers 0 -1  <br>1) <span class="hljs-string">&quot;3&quot;</span>  <br>2) <span class="hljs-string">&quot;2&quot;</span>  <br>3) <span class="hljs-string">&quot;1&quot;</span>  <br>4) <span class="hljs-string">&quot;7&quot;</span>  <br>5) <span class="hljs-string">&quot;8&quot;</span>  <br>  <br>127.0.0.1:6379&gt; lrem numbers 3 1  <br>(<span class="hljs-built_in">integer</span>) 1  <br>  <br>127.0.0.1:6379&gt; lrem numbers -1 8  <br>(<span class="hljs-built_in">integer</span>) 1  <br></code></pre></div></td></tr></table></figure><h4 id="获得-x2F-设置指定索引的元素值"><a href="#获得-x2F-设置指定索引的元素值" class="headerlink" title="获得&#x2F;设置指定索引的元素值"></a><a href="#%E8%8E%B7%E5%BE%97-%E8%AE%BE%E7%BD%AE%E6%8C%87%E5%AE%9A%E7%B4%A2%E5%BC%95%E7%9A%84%E5%85%83%E7%B4%A0%E5%80%BC" title="获得/设置指定索引的元素值"></a>获得&#x2F;设置指定索引的元素值</h4><p><code>LINDEX key index</code> ：返回指定索引的元素，索引从 <code>0</code> 开始，如果 <code>index</code> 是负数表示从右边开始计算的索引，最右边元素索引是 <code>-1</code> 。<br><code>LSET key index value</code> ：将索引为 <code>index</code> 的元素赋值为 <code>value</code> 。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; lrange numbers 0 -1  <br>1) <span class="hljs-string">&quot;5&quot;</span>  <br>2) <span class="hljs-string">&quot;6&quot;</span>  <br>3) <span class="hljs-string">&quot;7&quot;</span>  <br>4) <span class="hljs-string">&quot;8&quot;</span>  <br>5) <span class="hljs-string">&quot;9&quot;</span>  <br>6) <span class="hljs-string">&quot;7&quot;</span>  <br>  <br>127.0.0.1:6379&gt; lindex numbers 5  <br><span class="hljs-string">&quot;7&quot;</span>  <br>  <br>127.0.0.1:6379&gt; lindex numbers -1  <br><span class="hljs-string">&quot;7&quot;</span>  <br>  <br>127.0.0.1:6379&gt; lset numbers -1 10  <br>OK  <br>  <br>127.0.0.1:6379&gt; lindex numbers -1  <br><span class="hljs-string">&quot;10&quot;</span>  <br></code></pre></div></td></tr></table></figure><h4 id="只保留列表指定片段"><a href="#只保留列表指定片段" class="headerlink" title="只保留列表指定片段"></a><a href="#%E5%8F%AA%E4%BF%9D%E7%95%99%E5%88%97%E8%A1%A8%E6%8C%87%E5%AE%9A%E7%89%87%E6%AE%B5" title="只保留列表指定片段"></a>只保留列表指定片段</h4><p><code>LTRIM key start end</code>：删除指定索引范围之外的所有元素。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; lrange numbers 0 -1  <br>1) <span class="hljs-string">&quot;10&quot;</span>  <br>2) <span class="hljs-string">&quot;6&quot;</span>  <br>3) <span class="hljs-string">&quot;7&quot;</span>  <br>4) <span class="hljs-string">&quot;8&quot;</span>  <br>5) <span class="hljs-string">&quot;9&quot;</span>  <br>6) <span class="hljs-string">&quot;10&quot;</span>  <br>  <br>127.0.0.1:6379&gt; ltrim numbers 1 4  <br>OK  <br>  <br>127.0.0.1:6379&gt; lrange numbers 0 -1  <br>1) <span class="hljs-string">&quot;6&quot;</span>  <br>2) <span class="hljs-string">&quot;7&quot;</span>  <br>3) <span class="hljs-string">&quot;8&quot;</span>  <br>4) <span class="hljs-string">&quot;9&quot;</span>  <br></code></pre></div></td></tr></table></figure><h4 id="向列表中插入元素"><a href="#向列表中插入元素" class="headerlink" title="向列表中插入元素"></a><a href="#%E5%90%91%E5%88%97%E8%A1%A8%E4%B8%AD%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0" title="向列表中插入元素"></a>向列表中插入元素</h4><p><code>LINSERT key BEFORE|AFTER pivot value</code> ：先在列表中从左到右查找值为 <code>pivot</code> 的元素，然后根据第二个参数是 <code>before</code> 还是 <code>after</code> 来决定将 <code>value</code> 插入到该元素的前面还是后面。返回值是插入后列表的元素个数。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; lrange numbers 0 -1  <br>1) <span class="hljs-string">&quot;8&quot;</span>  <br>2) <span class="hljs-string">&quot;6&quot;</span>  <br>3) <span class="hljs-string">&quot;7&quot;</span>  <br>4) <span class="hljs-string">&quot;8&quot;</span>  <br>5) <span class="hljs-string">&quot;9&quot;</span>  <br>  <br>127.0.0.1:6379&gt; linsert numbers after 8 -2  <br>(<span class="hljs-built_in">integer</span>) 6  <br>  <br>127.0.0.1:6379&gt; lrange numbers 0 -1  <br>1) <span class="hljs-string">&quot;8&quot;</span>  <br>2) <span class="hljs-string">&quot;-2&quot;</span>  <br>3) <span class="hljs-string">&quot;6&quot;</span>  <br>4) <span class="hljs-string">&quot;7&quot;</span>  <br>5) <span class="hljs-string">&quot;8&quot;</span>  <br>6) <span class="hljs-string">&quot;9&quot;</span>  <br></code></pre></div></td></tr></table></figure><h4 id="将元素从一个列表转移到另一个列表"><a href="#将元素从一个列表转移到另一个列表" class="headerlink" title="将元素从一个列表转移到另一个列表"></a><a href="#%E5%B0%86%E5%85%83%E7%B4%A0%E4%BB%8E%E4%B8%80%E4%B8%AA%E5%88%97%E8%A1%A8%E8%BD%AC%E7%A7%BB%E5%88%B0%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%88%97%E8%A1%A8" title="将元素从一个列表转移到另一个列表"></a>将元素从一个列表转移到另一个列表</h4><p><code>RPOPLPUSH source destination</code> ：先执行 <code>RPOP</code> 命令再执行 <code>LPUSH</code> 命令。<code>RPOPLPUSH</code> 命令会先从 <code>source</code> 列表类型键的右边弹出一个元素，然后将其加入到 <code>destination</code> 列表类型键的左边，并返回这个元素的值，整个过程是原子的。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; rpoplpush numbers new_numbers  <br><span class="hljs-string">&quot;9&quot;</span>  <br></code></pre></div></td></tr></table></figure><h3 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a><a href="#%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B" title="集合类型"></a>集合类型</h3><p>集合类型在Redis内部是使用值为空的 <code>散列表</code> (hash table)实现的，所以这些操作的时间复杂度都是 <code>O(1)</code> 。在集合中的每个元素都是不同的，且没有顺序。一个集合类型(Set)键可以存储至多 <code>2^32-1</code> 个字符串。</p><h4 id="增加-x2F-删除元素"><a href="#增加-x2F-删除元素" class="headerlink" title="增加&#x2F;删除元素"></a><a href="#%E5%A2%9E%E5%8A%A0-%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0" title="增加/删除元素"></a>增加&#x2F;删除元素</h4><p>SADD key member [member …]<code> ：向集合增加一个或多个元素，如果键不存在则会自动创建。   SREM key member [member …]</code> ：从集合中删除一个或多个元素，并返回删除成功的个数。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; sadd letters a  <br>(<span class="hljs-built_in">integer</span>) 1  <br>  <br>127.0.0.1:6379&gt; sadd letters a b c  <br>(<span class="hljs-built_in">integer</span>) 2  <br>  <br>127.0.0.1:6379&gt; srem letters c d  <br>(<span class="hljs-built_in">integer</span>) 1  <br></code></pre></div></td></tr></table></figure><h4 id="获得集合中的所有元素"><a href="#获得集合中的所有元素" class="headerlink" title="获得集合中的所有元素"></a><a href="#%E8%8E%B7%E5%BE%97%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0" title="获得集合中的所有元素"></a>获得集合中的所有元素</h4><p><code>SMEMBERS key</code> ：返回集合中的所有元素。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; smembers letters  <br>1) <span class="hljs-string">&quot;b&quot;</span>  <br>2) <span class="hljs-string">&quot;a&quot;</span>  <br></code></pre></div></td></tr></table></figure><h4 id="判断元素是否在集合中"><a href="#判断元素是否在集合中" class="headerlink" title="判断元素是否在集合中"></a><a href="#%E5%88%A4%E6%96%AD%E5%85%83%E7%B4%A0%E6%98%AF%E5%90%A6%E5%9C%A8%E9%9B%86%E5%90%88%E4%B8%AD" title="判断元素是否在集合中"></a>判断元素是否在集合中</h4><p><code>SISMEMEBER key member</code> ：判断一个元素是否在集合中，时间复杂度是 <code>O(1)</code> 。当值存在时返回 <code>1</code> ，当值不存在或键不存在时返回 <code>0</code> .</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; sismember letters b  <br>(<span class="hljs-built_in">integer</span>) 1  <br>  <br>127.0.0.1:6379&gt; sismember letters f  <br>(<span class="hljs-built_in">integer</span>) 0  <br>  <br>127.0.0.1:6379&gt; sismember letter b  <br>(<span class="hljs-built_in">integer</span>) 0  <br></code></pre></div></td></tr></table></figure><h4 id="集合间运算"><a href="#集合间运算" class="headerlink" title="集合间运算"></a><a href="#%E9%9B%86%E5%90%88%E9%97%B4%E8%BF%90%E7%AE%97" title="集合间运算"></a>集合间运算</h4><p><code>SDIFF key [key …]</code> ：对多个集合进行 <code>差集</code> 运算<br><code>SINTER key [key …]</code> ：对多个集合执行 <code>交集</code> 运算<br><code>SUNION KEY [KEY …]</code> ：对多个集合执行 <code>并集</code> 运算</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; sadd setA 1 2 3  <br>(<span class="hljs-built_in">integer</span>) 3  <br>127.0.0.1:6379&gt; sadd setB 2 3 4  <br>(<span class="hljs-built_in">integer</span>) 3  <br>127.0.0.1:6379&gt; sdiff setA setB  <br>1) <span class="hljs-string">&quot;1&quot;</span>  <br>127.0.0.1:6379&gt; sdiff setB setA  <br>1) <span class="hljs-string">&quot;4&quot;</span>  <br>127.0.0.1:6379&gt; sadd setC 2 3  <br>(<span class="hljs-built_in">integer</span>) 2  <br>127.0.0.1:6379&gt; sdiff setA setB setC  <br>1) <span class="hljs-string">&quot;1&quot;</span>  <br>  <br>127.0.0.1:6379&gt; sinter setA setB  <br>1) <span class="hljs-string">&quot;2&quot;</span>  <br>2) <span class="hljs-string">&quot;3&quot;</span>  <br>127.0.0.1:6379&gt; sinter setA setB setC  <br>1) <span class="hljs-string">&quot;2&quot;</span>  <br>2) <span class="hljs-string">&quot;3&quot;</span>  <br>  <br>127.0.0.1:6379&gt; sunion setA setB  <br>1) <span class="hljs-string">&quot;1&quot;</span>  <br>2) <span class="hljs-string">&quot;2&quot;</span>  <br>3) <span class="hljs-string">&quot;3&quot;</span>  <br>4) <span class="hljs-string">&quot;4&quot;</span>  <br>127.0.0.1:6379&gt; sunion setA setB setC  <br>1) <span class="hljs-string">&quot;1&quot;</span>  <br>2) <span class="hljs-string">&quot;2&quot;</span>  <br>3) <span class="hljs-string">&quot;3&quot;</span>  <br>4) <span class="hljs-string">&quot;4&quot;</span>  <br></code></pre></div></td></tr></table></figure><h4 id="获取元素中集合个数"><a href="#获取元素中集合个数" class="headerlink" title="获取元素中集合个数"></a><a href="#%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0%E4%B8%AD%E9%9B%86%E5%90%88%E4%B8%AA%E6%95%B0" title="获取元素中集合个数"></a>获取元素中集合个数</h4><p><code>SCARD key</code> ：获取集合中的元素个数。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; smembers letters  <br>1) <span class="hljs-string">&quot;c&quot;</span>  <br>2) <span class="hljs-string">&quot;b&quot;</span>  <br>3) <span class="hljs-string">&quot;a&quot;</span>  <br>127.0.0.1:6379&gt; scard letters  <br>(<span class="hljs-built_in">integer</span>) 3  <br></code></pre></div></td></tr></table></figure><h4 id="进行集合运算并将结果存储"><a href="#进行集合运算并将结果存储" class="headerlink" title="进行集合运算并将结果存储"></a><a href="#%E8%BF%9B%E8%A1%8C%E9%9B%86%E5%90%88%E8%BF%90%E7%AE%97%E5%B9%B6%E5%B0%86%E7%BB%93%E6%9E%9C%E5%AD%98%E5%82%A8" title="进行集合运算并将结果存储"></a>进行集合运算并将结果存储</h4><p><code>SDIFFFSTORE destination key [key …]</code> ：<br><code>SINTERSTORE destination key [key …]</code> ：<br><code>SUNIONSTORE destination key [key …]</code> ：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; sdiffstore setAB setA setB  <br>(<span class="hljs-built_in">integer</span>) 1  <br>127.0.0.1:6379&gt; smembers setAB  <br>1) <span class="hljs-string">&quot;1&quot;</span>  <br>  <br>127.0.0.1:6379&gt; sinterstore setAinB setA setB  <br>(<span class="hljs-built_in">integer</span>) 2  <br>127.0.0.1:6379&gt; smembers setAinB  <br>1) <span class="hljs-string">&quot;2&quot;</span>  <br>2) <span class="hljs-string">&quot;3&quot;</span>  <br>  <br>127.0.0.1:6379&gt; sunionstore setAandB setA setB  <br>(<span class="hljs-built_in">integer</span>) 4  <br>127.0.0.1:6379&gt; smembers setAandB  <br>1) <span class="hljs-string">&quot;1&quot;</span>  <br>2) <span class="hljs-string">&quot;2&quot;</span>  <br>3) <span class="hljs-string">&quot;3&quot;</span>  <br>4) <span class="hljs-string">&quot;4&quot;</span> <br></code></pre></div></td></tr></table></figure><h4 id="随机获取集合中的元素"><a href="#随机获取集合中的元素" class="headerlink" title="随机获取集合中的元素"></a><a href="#%E9%9A%8F%E6%9C%BA%E8%8E%B7%E5%8F%96%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0" title="随机获取集合中的元素"></a>随机获取集合中的元素</h4><p><code>SRANDMEMBER key [count]</code> ：随机从集合中获取一个元素  </p><ol><li>当 <code>count</code> 为正数时，<code>SRANDMEMBER</code> 会随机从集合里获得 <code>count</code> 个不重复的元素。如果 <code>count</code> 的值大于集合中的元素个数，则返回全部元素。  </li><li>当 <code>count</code> 为负数时，<code>SRANDMEMBER</code> 会随机从集合里获得 <code>|count|</code> 个的元素，这些元素有可能相同。</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; srandmember letters  <br><span class="hljs-string">&quot;a&quot;</span>  <br>  <br>127.0.0.1:6379&gt; srandmember letters 2  <br>1) <span class="hljs-string">&quot;a&quot;</span>  <br>2) <span class="hljs-string">&quot;b&quot;</span>  <br>127.0.0.1:6379&gt; srandmember letters -2  <br>1) <span class="hljs-string">&quot;a&quot;</span>  <br>2) <span class="hljs-string">&quot;a&quot;</span>  <br>127.0.0.1:6379&gt;  <br></code></pre></div></td></tr></table></figure><h4 id="从集合中弹出一个元素"><a href="#从集合中弹出一个元素" class="headerlink" title="从集合中弹出一个元素"></a><a href="#%E4%BB%8E%E9%9B%86%E5%90%88%E4%B8%AD%E5%BC%B9%E5%87%BA%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0" title="从集合中弹出一个元素"></a>从集合中弹出一个元素</h4><p><code>SPOP key</code> ：从集合中随机选择一个元素弹出。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; spop letters  <br><span class="hljs-string">&quot;c&quot;</span>  <br></code></pre></div></td></tr></table></figure><h3 id="有序集合类型"><a href="#有序集合类型" class="headerlink" title="有序集合类型"></a><a href="#%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B" title="有序集合类型"></a>有序集合类型</h3><p>在集合类型的基础上有序集合类型为集合中的每一个元素都关联了一个分数。有序集合类型是使用散列表和跳跃表<br>实现的，时间复杂度为 <code>O(log(n))</code> 。有序集合比列表类型更耗费内存。</p><h4 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a><a href="#%E5%A2%9E%E5%8A%A0%E5%85%83%E7%B4%A0" title="增加元素"></a>增加元素</h4><p><code>ZADD key score member [score member …]</code> ：向有序集合中加入一个元素和该元素的分数，如果该元素已经存在则会用新的分数替换原有的分数。返回值是新加入到集合中的元素个数(不包含之前已经存在的元素)。分数不仅可以是整数，还可以是双精度浮点数。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; zadd scoreboard 89 Tom 67 Peter 100 Jenkin  <br>(<span class="hljs-built_in">integer</span>) 3  <br>127.0.0.1:6379&gt; zadd scoreboard 76 Peter  <br>(<span class="hljs-built_in">integer</span>) 0  <br>127.0.0.1:6379&gt; zadd testboard +inf c  <br>(<span class="hljs-built_in">integer</span>) 1  <br>127.0.0.1:6379&gt; zadd testboard -inf d  <br>(<span class="hljs-built_in">integer</span>) 1  <br></code></pre></div></td></tr></table></figure><blockquote><p><code>+inf</code> 表示正无穷，<code>-inf</code> 表示负无穷。</p></blockquote><h4 id="获得元素的分数"><a href="#获得元素的分数" class="headerlink" title="获得元素的分数"></a><a href="#%E8%8E%B7%E5%BE%97%E5%85%83%E7%B4%A0%E7%9A%84%E5%88%86%E6%95%B0" title="获得元素的分数"></a>获得元素的分数</h4><p><code>ZSCORE key member</code> ：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; zscore scoreboard Jenkin  <br><span class="hljs-string">&quot;100&quot;</span>  <br></code></pre></div></td></tr></table></figure><h4 id="获取排名在某个范围的元素列表"><a href="#获取排名在某个范围的元素列表" class="headerlink" title="获取排名在某个范围的元素列表"></a><a href="#%E8%8E%B7%E5%8F%96%E6%8E%92%E5%90%8D%E5%9C%A8%E6%9F%90%E4%B8%AA%E8%8C%83%E5%9B%B4%E7%9A%84%E5%85%83%E7%B4%A0%E5%88%97%E8%A1%A8" title="获取排名在某个范围的元素列表"></a>获取排名在某个范围的元素列表</h4><p><code>ZRANGE key start stop [WITHSCORES]</code> ：按照元素分数从小到大的顺序返回索引从 <code>start</code> 到 <code>stop</code> 之间的所有元素(包含两端的元素)。时间复杂度为 <code>O(log n+m)</code> (其中n为有序集合的基数，m为返回的元素个数)。如果两个元素的分数相同则会按照字典顺序( <code>0&lt;9&lt;A&lt;Z&lt;a&lt;z</code> )进行排序。<code>ZRANGE</code> 与 <code>LRANGE</code> 命令十分相似。<br><code>ZREVRANGE key start stop [WITHSCORES]</code> ：按照元素分数从大到小的顺序给出结果。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; zrange scoreboard 0 2  <br>1) <span class="hljs-string">&quot;Peter&quot;</span>  <br>2) <span class="hljs-string">&quot;Tom&quot;</span>  <br>3) <span class="hljs-string">&quot;Jenkin&quot;</span>  <br>  <br>127.0.0.1:6379&gt; zrange scoreboard 1 -1  <br>1) <span class="hljs-string">&quot;Tom&quot;</span>  <br>2) <span class="hljs-string">&quot;Jenkin&quot;</span>  <br>  <br>127.0.0.1:6379&gt; zrange scoreboard 0 -1 withscores  <br>1) <span class="hljs-string">&quot;Peter&quot;</span>  <br>2) <span class="hljs-string">&quot;76&quot;</span>  <br>3) <span class="hljs-string">&quot;Tom&quot;</span>  <br>4) <span class="hljs-string">&quot;89&quot;</span>  <br>5) <span class="hljs-string">&quot;Jenkin&quot;</span>  <br>6) <span class="hljs-string">&quot;100&quot;</span>  <br>  <br>127.0.0.1:6379&gt; zrevrange scoreboard 0 -1 withscores  <br>1) <span class="hljs-string">&quot;Jenkin&quot;</span>  <br>2) <span class="hljs-string">&quot;100&quot;</span>  <br>3) <span class="hljs-string">&quot;Tom&quot;</span>  <br>4) <span class="hljs-string">&quot;89&quot;</span>  <br>5) <span class="hljs-string">&quot;Peter&quot;</span>  <br>6) <span class="hljs-string">&quot;76&quot;</span>  <br></code></pre></div></td></tr></table></figure><h4 id="获得指定分数范围的元素"><a href="#获得指定分数范围的元素" class="headerlink" title="获得指定分数范围的元素"></a><a href="#%E8%8E%B7%E5%BE%97%E6%8C%87%E5%AE%9A%E5%88%86%E6%95%B0%E8%8C%83%E5%9B%B4%E7%9A%84%E5%85%83%E7%B4%A0" title="获得指定分数范围的元素"></a>获得指定分数范围的元素</h4><p><code>ZRANGEBYSCORE key min max [WITHSCORES][LIMIT offset count]</code> ：按照元素分数从小到大的顺序返回分数在 <code>min</code> 和 <code>max</code> 之间的元素。<code>LIMIT offset count</code> 与SQL中的用法基本相同，即在获得的元素列表的基础上向后偏移 <code>offset</code> 个元素，并且只获取前 <code>count</code> 个元素。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; zrange scoreboard 0 -1 withscores  <br> 1) <span class="hljs-string">&quot;Jerry&quot;</span>  <br> 2) <span class="hljs-string">&quot;56&quot;</span>  <br> 3) <span class="hljs-string">&quot;Danny&quot;</span>  <br> 4) <span class="hljs-string">&quot;67&quot;</span>  <br> 5) <span class="hljs-string">&quot;Peter&quot;</span>  <br> 6) <span class="hljs-string">&quot;76&quot;</span>  <br> 7) <span class="hljs-string">&quot;Tom&quot;</span>  <br> 8) <span class="hljs-string">&quot;89&quot;</span>  <br> 9) <span class="hljs-string">&quot;Wenddy&quot;</span>  <br>10) <span class="hljs-string">&quot;92&quot;</span>  <br>11) <span class="hljs-string">&quot;Jenkin&quot;</span>  <br>12) <span class="hljs-string">&quot;100&quot;</span>  <br>  <br>127.0.0.1:6379&gt; zrangebyscore scoreboard 80 100  <br>1) <span class="hljs-string">&quot;Tom&quot;</span>  <br>2) <span class="hljs-string">&quot;Wenddy&quot;</span>  <br>3) <span class="hljs-string">&quot;Jenkin&quot;</span>  <br>  <br>127.0.0.1:6379&gt; zrangebyscore scoreboard 80 (100  <br>1) <span class="hljs-string">&quot;Tom&quot;</span>  <br>2) <span class="hljs-string">&quot;Wenddy&quot;</span>  <br>  <br>127.0.0.1:6379&gt; zrangebyscore scoreboard (80 +inf  <br>1) <span class="hljs-string">&quot;Tom&quot;</span>  <br>2) <span class="hljs-string">&quot;Wenddy&quot;</span>  <br>3) <span class="hljs-string">&quot;Jenkin&quot;</span>  <br>  <br>127.0.0.1:6379&gt; zrangebyscore scoreboard 60 +inf <span class="hljs-built_in">limit</span> 1 3  <br>1) <span class="hljs-string">&quot;Peter&quot;</span>  <br>2) <span class="hljs-string">&quot;Tom&quot;</span>  <br>3) <span class="hljs-string">&quot;Wenddy&quot;</span>  <br>  <br>127.0.0.1:6379&gt; zrevrangebyscore scoreboard 100 0 <span class="hljs-built_in">limit</span> 0 3  <br>1) <span class="hljs-string">&quot;Jenkin&quot;</span>  <br>2) <span class="hljs-string">&quot;Wenddy&quot;</span>  <br>3) <span class="hljs-string">&quot;Tom&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="增加某个元素的分数"><a href="#增加某个元素的分数" class="headerlink" title="增加某个元素的分数"></a><a href="#%E5%A2%9E%E5%8A%A0%E6%9F%90%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E5%88%86%E6%95%B0" title="增加某个元素的分数"></a>增加某个元素的分数</h4><p><code>ZINCRBY key increment member</code>：增加一个元素的分数，返回值是更改后的分数。如果指定的元素不存在，Redis在执行命令前会先建立它并将它的分数赋为0再执行操作。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; zincrby scoreboard 100 Jenkin  <br><span class="hljs-string">&quot;200&quot;</span>  <br>127.0.0.1:6379&gt; zincrby scoreboard -100 Jenkin  <br><span class="hljs-string">&quot;100&quot;</span>  <br></code></pre></div></td></tr></table></figure><h4 id="获取集合中元素的数量"><a href="#获取集合中元素的数量" class="headerlink" title="获取集合中元素的数量"></a><a href="#%E8%8E%B7%E5%8F%96%E9%9B%86%E5%90%88%E4%B8%AD%E5%85%83%E7%B4%A0%E7%9A%84%E6%95%B0%E9%87%8F" title="获取集合中元素的数量"></a>获取集合中元素的数量</h4><p><code>ZCARD key</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; zcard scoreboard  <br>(<span class="hljs-built_in">integer</span>) 6  <br></code></pre></div></td></tr></table></figure><h4 id="获得指定分数范围内的元素个数"><a href="#获得指定分数范围内的元素个数" class="headerlink" title="获得指定分数范围内的元素个数"></a><a href="#%E8%8E%B7%E5%BE%97%E6%8C%87%E5%AE%9A%E5%88%86%E6%95%B0%E8%8C%83%E5%9B%B4%E5%86%85%E7%9A%84%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0" title="获得指定分数范围内的元素个数"></a>获得指定分数范围内的元素个数</h4><p><code>ZCOUNT key min max</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; zcount scoreboard 80 100  <br>(<span class="hljs-built_in">integer</span>) 3  <br>127.0.0.1:6379&gt; zcount scoreboard 80 (100  <br>(<span class="hljs-built_in">integer</span>) 2  <br></code></pre></div></td></tr></table></figure><h4 id="删除一个或多个元素"><a href="#删除一个或多个元素" class="headerlink" title="删除一个或多个元素"></a><a href="#%E5%88%A0%E9%99%A4%E4%B8%80%E4%B8%AA%E6%88%96%E5%A4%9A%E4%B8%AA%E5%85%83%E7%B4%A0" title="删除一个或多个元素"></a>删除一个或多个元素</h4><p><code>ZREM key member [member …]</code> ：命令返回值是成功删除的元素数量(不包含本来就不存在的元素)。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; zrem scoreboard Wenddy  <br>(<span class="hljs-built_in">integer</span>) 1  <br>127.0.0.1:6379&gt; zcard scoreboard  <br>(<span class="hljs-built_in">integer</span>) 5  <br></code></pre></div></td></tr></table></figure><h4 id="按照排名范围删除元素"><a href="#按照排名范围删除元素" class="headerlink" title="按照排名范围删除元素"></a><a href="#%E6%8C%89%E7%85%A7%E6%8E%92%E5%90%8D%E8%8C%83%E5%9B%B4%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0" title="按照排名范围删除元素"></a>按照排名范围删除元素</h4><p><code>ZREMRANGEBYRANK key start stop</code> ：按照元素分数从小到大的顺序删除处在指定排名范围内的所有元素，并返回删除的元素数量。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; zadd testRem 1 a 2 b 3 c 4 d 5 e 6 f  <br>(<span class="hljs-built_in">integer</span>) 6  <br>127.0.0.1:6379&gt; zremrangebyrank testRem 0 2  <br>(<span class="hljs-built_in">integer</span>) 3  <br>  <br>127.0.0.1:6379&gt; zrange testRem 0 -1  <br>1) <span class="hljs-string">&quot;d&quot;</span>  <br>2) <span class="hljs-string">&quot;e&quot;</span>  <br>3) <span class="hljs-string">&quot;f&quot;</span> <br></code></pre></div></td></tr></table></figure><h4 id="按照分数范围删除元素"><a href="#按照分数范围删除元素" class="headerlink" title="按照分数范围删除元素"></a><a href="#%E6%8C%89%E7%85%A7%E5%88%86%E6%95%B0%E8%8C%83%E5%9B%B4%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0" title="按照分数范围删除元素"></a>按照分数范围删除元素</h4><p><code>ZREMRANGEBYSCORE key min max</code> ：删除指定范围内的所有元素。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; zremrangebyscore testRem (4 5  <br>(<span class="hljs-built_in">integer</span>) 1  <br>127.0.0.1:6379&gt; zrange testRem 0 -1  <br>1) <span class="hljs-string">&quot;d&quot;</span>  <br>2) <span class="hljs-string">&quot;f&quot;</span>  <br></code></pre></div></td></tr></table></figure><h4 id="获得元素的排名"><a href="#获得元素的排名" class="headerlink" title="获得元素的排名"></a><a href="#%E8%8E%B7%E5%BE%97%E5%85%83%E7%B4%A0%E7%9A%84%E6%8E%92%E5%90%8D" title="获得元素的排名"></a>获得元素的排名</h4><p><code>ZRANK key member</code> ：按照元素分数从下到大的顺序获得指定的元素排名<br><code>ZREVRANK member</code> ：分数最大的元素排名为 <code>0</code> .</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; zrange scoreboard 0 -1 withscores  <br> 1) <span class="hljs-string">&quot;Jerry&quot;</span>  <br> 2) <span class="hljs-string">&quot;56&quot;</span>  <br> 3) <span class="hljs-string">&quot;Danny&quot;</span>  <br> 4) <span class="hljs-string">&quot;67&quot;</span>  <br> 5) <span class="hljs-string">&quot;Peter&quot;</span>  <br> 6) <span class="hljs-string">&quot;76&quot;</span>  <br> 7) <span class="hljs-string">&quot;Tom&quot;</span>  <br> 8) <span class="hljs-string">&quot;89&quot;</span>  <br> 9) <span class="hljs-string">&quot;Jenkin&quot;</span>  <br>10) <span class="hljs-string">&quot;100&quot;</span>  <br>127.0.0.1:6379&gt; zrank scoreboard Jenkin  <br>(<span class="hljs-built_in">integer</span>) 4  <br>127.0.0.1:6379&gt; zrevrank scoreboard Jenkin  <br>(<span class="hljs-built_in">integer</span>) 0  <br></code></pre></div></td></tr></table></figure><h4 id="计算有序集合的交集"><a href="#计算有序集合的交集" class="headerlink" title="计算有序集合的交集"></a><a href="#%E8%AE%A1%E7%AE%97%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%E7%9A%84%E4%BA%A4%E9%9B%86" title="计算有序集合的交集"></a>计算有序集合的交集</h4><p><code>ZINTERSTORE destination numkeys key [key …][WEIGHTS weight [weight …]] [AGGREGATE SUM|MIN|MAX]</code> ：计算多个有序集合的交集并将结果存储在 <code>destination</code> 键中，返回值为 <code>destination</code> 键中的元素个数。<code>destination</code> 键中元素的分数是由 <code>AGGREGATE</code> 参数决定的。  </p><ol><li>当 <code>AGGREGATE</code> 是 <code>SUM</code> 时(也就是默认值)，<code>destination</code> 键中元素的分数是每一个参与计算的集合中该元素分数的 <code>和</code> 。  </li><li>当 <code>AGGREGATE</code> 是 <code>MIN</code> 时，<code>destination</code> 键中元素的分数是每一个参与计算的集合中该元素分数的 <code>最小值</code> 。  </li><li>当 <code>AGGREGATE</code> 是 <code>MAX</code> 时，<code>destination</code> 键中元素的分数是每一个参与计算的集合中该元素分数的 <code>最大值</code> 。<br><code>ZINTERSTORE</code> 还能够通过 <code>WEIGHTS</code> 参数设置每个集合的权重，每个集合在参与计算时元素的分数会被乘上该集合的权重。</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; zadd sortedSets1 1 a 2 b  <br>(<span class="hljs-built_in">integer</span>) 2  <br>127.0.0.1:6379&gt; zadd sortedSets2 10 a 20 b  <br>(<span class="hljs-built_in">integer</span>) 2  <br>  <br>127.0.0.1:6379&gt; zinterstore sortedSetsResults 2 sortedSets1 sortedSets2  <br>(<span class="hljs-built_in">integer</span>) 2  <br>  <br>127.0.0.1:6379&gt; zrange sortedSetsResults 0 -1 withscores  <br>1) <span class="hljs-string">&quot;a&quot;</span>  <br>2) <span class="hljs-string">&quot;11&quot;</span>  <br>3) <span class="hljs-string">&quot;b&quot;</span>  <br>4) <span class="hljs-string">&quot;22&quot;</span>  <br>  <br>127.0.0.1:6379&gt; zinterstore sortedSetsResult 2 sortedSets1 sortedSets2 aggregate min  <br>(<span class="hljs-built_in">integer</span>) 2  <br>  <br>127.0.0.1:6379&gt; zrange sortedSetsResult 0 -1 withscores  <br>1) <span class="hljs-string">&quot;a&quot;</span>  <br>2) <span class="hljs-string">&quot;1&quot;</span>  <br>3) <span class="hljs-string">&quot;b&quot;</span>  <br>4) <span class="hljs-string">&quot;2&quot;</span>  <br>  <br>127.0.0.1:6379&gt; zinterstore sortedSetsResult 2 sortedSets1 sortedSets2 aggregate max  <br>(<span class="hljs-built_in">integer</span>) 2  <br>127.0.0.1:6379&gt; zrange sortedSetsResult 0 -1 withscores  <br>1) <span class="hljs-string">&quot;a&quot;</span>  <br>2) <span class="hljs-string">&quot;10&quot;</span>  <br>3) <span class="hljs-string">&quot;b&quot;</span>  <br>4) <span class="hljs-string">&quot;20&quot;</span>  <br>  <br>127.0.0.1:6379&gt; zinterstore sortedSetsResults 2 sortedSets1 sortedSets2 weights 1 0.1  <br>(<span class="hljs-built_in">integer</span>) 2  <br>127.0.0.1:6379&gt; zrange sortedSetsResults 0 -1 withscores  <br>1) <span class="hljs-string">&quot;a&quot;</span>  <br>2) <span class="hljs-string">&quot;2&quot;</span>  <br>3) <span class="hljs-string">&quot;b&quot;</span>  <br>4) <span class="hljs-string">&quot;4&quot;</span> <br></code></pre></div></td></tr></table></figure><blockquote><p>参考书籍：《Redis入门指南(第二版)》李子骅 编著</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习笔记---基础一</title>
    <link href="/2018/10/24/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E4%B8%80/"/>
    <url>/2018/10/24/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h3 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a><a href="#Redis%E7%AE%80%E4%BB%8B" title="Redis简介"></a>Redis简介</h3><p><a href="https://redis.io/">Redis</a>是一个开源的、高性能的、基于键值对的缓存与存储系统，通过提供多种键值数据类型来适应不同场景下的缓存与存储需求。同时Redis的诸多高层级功能使其可以胜任消息队列、任务队列等不同角色。</p><h3 id="Redis的特性"><a href="#Redis的特性" class="headerlink" title="Redis的特性"></a><a href="#Redis%E7%9A%84%E7%89%B9%E6%80%A7" title="Redis的特性"></a>Redis的特性</h3><h4 id="1-键值数据类型"><a href="#1-键值数据类型" class="headerlink" title="1.键值数据类型"></a><a href="#1-%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" title="1.键值数据类型"></a>1.键值数据类型</h4><ul><li><code>字符串类型</code></li><li><code>散列类型</code></li><li><code>列表类型</code></li><li><code>集合类型</code></li><li><code>有序集合类型</code></li></ul><h4 id="2-内存存储于持久化"><a href="#2-内存存储于持久化" class="headerlink" title="2.内存存储于持久化"></a><a href="#2-%E5%86%85%E5%AD%98%E5%AD%98%E5%82%A8%E4%BA%8E%E6%8C%81%E4%B9%85%E5%8C%96" title="2.内存存储于持久化"></a>2.内存存储于持久化</h4><p>Redis数据库中的所有数据都是存储在内存中。由于内存的读写速度远快于硬盘，因此Redis在性能上对比其他基于硬盘存储的数据库有非常明显的优势，在一台普通的笔记本电脑上，Redis可以一秒内读写超过10万个键值。</p><h4 id="3-功能丰富"><a href="#3-功能丰富" class="headerlink" title="3.功能丰富"></a><a href="#3-%E5%8A%9F%E8%83%BD%E4%B8%B0%E5%AF%8C" title="3.功能丰富"></a>3.功能丰富</h4><p>Redis虽然是作为数据库开发的，但大部分人还是将其作为缓存、队列系统来用。</p><blockquote><p>Redis和Memcached的对比：在性能上Redis是单线程的，而Memcached支持多线程，虽然在多核服务器上后者的性能理论相对高一些，但Redis的性能非常优异，这不会成为他的瓶颈。在Redis3.0中，加入了对集群的支持，Memcached不在具有优势</p></blockquote><h4 id="4-简单稳定"><a href="#4-简单稳定" class="headerlink" title="4.简单稳定"></a><a href="#4-%E7%AE%80%E5%8D%95%E7%A8%B3%E5%AE%9A" title="4.简单稳定"></a>4.简单稳定</h4><h3 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a><a href="#%E5%AE%89%E8%A3%85Redis" title="安装Redis"></a>安装Redis</h3><p>因为我用的是MBP，这里我只介绍OS X里的安装方法，通过 <code>homebrew</code> 来安装Redis。</p><h4 id="1-首先安装HomeBrew"><a href="#1-首先安装HomeBrew" class="headerlink" title="1.首先安装HomeBrew"></a><a href="#1-%E9%A6%96%E5%85%88%E5%AE%89%E8%A3%85HomeBrew" title="1.首先安装HomeBrew"></a>1.首先安装<a href="https://brew.sh/">HomeBrew</a></h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ruby -e <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span>  <br></code></pre></div></td></tr></table></figure><p>如果已经安装 <code>homebrew</code> ，执行 <code>homebrew update</code> 来更新 <code>homebrew</code> ，以便安装最新的 <code>redis</code> 。</p><h4 id="2-通过Homebrew安装Redis"><a href="#2-通过Homebrew安装Redis" class="headerlink" title="2.通过Homebrew安装Redis"></a><a href="#2-%E9%80%9A%E8%BF%87Homebrew%E5%AE%89%E8%A3%85Redis" title="2.通过Homebrew安装Redis"></a>2.通过Homebrew安装Redis</h4><p>在终端中输入下面代码</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ brew install redis  <br></code></pre></div></td></tr></table></figure><h3 id="启动和停止Redis"><a href="#启动和停止Redis" class="headerlink" title="启动和停止Redis"></a><a href="#%E5%90%AF%E5%8A%A8%E5%92%8C%E5%81%9C%E6%AD%A2Redis" title="启动和停止Redis"></a>启动和停止Redis</h3><h4 id="1-启动"><a href="#1-启动" class="headerlink" title="1.启动"></a><a href="#1-%E5%90%AF%E5%8A%A8" title="1.启动"></a>1.启动</h4><p>终端中输入如下命令，默认使用 <code>6379</code> 端口，即可启动Redis。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ redis-server  <br></code></pre></div></td></tr></table></figure><p>启动效果：</p><p>![Redis启动效果](&#x2F;images&#x2F;Screen Shot 2018-10-23 at 22.58.35.png)</p><p>也可通过 <code>–port</code> 参数自定义端口号。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ redis-server --port 6380  <br></code></pre></div></td></tr></table></figure><blockquote><p><code>6379</code> 是手机键盘上MERZ对应的数字，MERZ是一名意大利歌女的名字</p></blockquote><h4 id="2-停止"><a href="#2-停止" class="headerlink" title="2.停止"></a><a href="#2-%E5%81%9C%E6%AD%A2" title="2.停止"></a>2.停止</h4><p>强行终止Redis进程可能会导致数据丢失，正确做法是 向Redis发送 <code>SHUTDOWN</code> 命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ redis-cli SHUTDOWN  <br></code></pre></div></td></tr></table></figure><p>Redis收到 <code>SHUTDOWN</code> 命令后，会先断开所有的客户端连接，然后根据配置执行持久化，最后完成退出。使用 <code>kill Redis进程的PID</code> 也可以正常关闭Redis，效果与 <code>SHUTDOWN</code> 一样。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a><a href="#%E9%85%8D%E7%BD%AE" title="配置"></a>配置</h3><p>启用配置文件的方法是在启动时将配置文件的路径作为启动参数传递给 <code>redis-server</code> ，如：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ redis-server /path/to/redis.conf  <br></code></pre></div></td></tr></table></figure><p>Redis提供了一个配置文件的模板 <code>redis.conf</code> ，位于源代码目录的根目录中。</p><h3 id="多数据库"><a href="#多数据库" class="headerlink" title="多数据库"></a><a href="#%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93" title="多数据库"></a>多数据库</h3><p>Redis默认支持 <code>16</code> 个数据库，可通过配置参数 <code>databases</code> 来修改这一数字。客户端与Redis建立连接后自动选择 <code>0</code> 号数据库，可通过 <code>SELECT</code> 命令随时更换数据库：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">redis&gt; SELECT 1  <br>OK  <br>redis [1]&gt;  <br></code></pre></div></td></tr></table></figure><p>Redis不支持自定义数据库名字，每个数据库都以编号命名。Redis不支持为每个数据库设置不同的访问密码。所以一个客户端要么访问全部数据库，要么一个数据库也没有权限。多个数据库之间并不是完全隔离，<code>FLUSHALL</code> 命令可以清空Redis实例中所有数据库中的数据。由于Redis非常轻量级，一个空Redis实例占用的内存只有1MB左右，所以不用担心多个Redis实例会额外占用很多内存。</p><blockquote><p>参考书籍：《Redis入门指南(第二版)》李子骅</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合Redis开发RESTful API接口</title>
    <link href="/2018/10/19/SpringBoot%E6%95%B4%E5%90%88Redis%E5%BC%80%E5%8F%91RESTful-API%E6%8E%A5%E5%8F%A3/"/>
    <url>/2018/10/19/SpringBoot%E6%95%B4%E5%90%88Redis%E5%BC%80%E5%8F%91RESTful-API%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="项目框架"><a href="#项目框架" class="headerlink" title="项目框架"></a><a href="#%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6" title="项目框架"></a>项目框架</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java">├── pom.xml  <br>├── springbootreidsrestfulapi.iml  <br>├── src  <br>│   ├── main  <br>│   │   ├── java  <br>│   │   │   └── com  <br>│   │   │       └── jenkin  <br>│   │   │           └── springboot  <br>│   │   │               ├── App.java  <br>│   │   │               ├── controller  <br>│   │   │               │   └── UserController.java  <br>│   │   │               ├── pojo  <br>│   │   │               │   ├── RedisConfigBean.java  <br>│   │   │               │   └── User.java  <br>│   │   │               ├── redis  <br>│   │   │               │   └── RedisConfig.java  <br>│   │   │               └── service  <br>│   │   │                   ├── UserService.java  <br>│   │   │                   └── impl  <br>│   │   │                       └── UserServiceImpl.java  <br>│   │   └── resources  <br>│   │       └── application.properties  <br></code></pre></div></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a><a href="#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" title="配置文件"></a>配置文件</h3><p>在<a href="https://spring.io/guides/gs/spring-boot/">SpringBoot</a>里的 <code>application.properties</code> 文件中配置<a href="https://redis.io/">Redis</a>信息  </p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># REDIS (RedisProperties)  </span><br><span class="hljs-comment"># Database index used by the connection factory.  </span><br><span class="hljs-attr">spring.redis.database</span>=<span class="hljs-string">0  </span><br><span class="hljs-comment">  </span><br><span class="hljs-comment"># Redis server host.  </span><br><span class="hljs-attr">spring.redis.host</span>=<span class="hljs-string">localhost  </span><br><span class="hljs-comment">  </span><br><span class="hljs-comment"># Login password of the redis server.  </span><br><span class="hljs-attr">spring.redis.password</span>=  <span class="hljs-string"></span><br><span class="hljs-comment">  </span><br><span class="hljs-comment"># Redis server port.  </span><br><span class="hljs-attr">spring.redis.port</span>=<span class="hljs-string">6379  </span><br><span class="hljs-comment">  </span><br><span class="hljs-comment"># Maximum number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.  </span><br><span class="hljs-attr">spring.redis.lettuce.pool.max-active</span>=<span class="hljs-string">8  </span><br><span class="hljs-comment">  </span><br><span class="hljs-comment"># Maximum number of &quot;idle&quot; connections in the pool. Use a negative value to indicate an unlimited number of idle connections.  </span><br><span class="hljs-attr">spring.redis.lettuce.pool.max-idle</span>=<span class="hljs-string">8  </span><br><span class="hljs-comment">  </span><br><span class="hljs-comment"># Maximum amount of time a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.  </span><br><span class="hljs-attr">spring.redis.lettuce.pool.max-wait</span>=<span class="hljs-string">-1ms  </span><br><span class="hljs-comment">  </span><br><span class="hljs-comment"># Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.  </span><br><span class="hljs-attr">spring.redis.lettuce.pool.min-idle</span>=<span class="hljs-string">0  </span><br><span class="hljs-comment">  </span><br><span class="hljs-comment"># Shutdown timeout.  </span><br><span class="hljs-attr">spring.redis.lettuce.shutdown-timeout</span>=<span class="hljs-string">100ms  </span><br></code></pre></div></td></tr></table></figure><p><a href="https://redis.io/">Redis</a>有两种连接方式：一个是<a href="https://github.com/xetorthio/jedis">Jedis</a>，另一个是<a href="https://lettuce.io/">Lettuce</a>。它俩间的区别：使用Jedis，如果多线程使用同一个连接，线程时不安全的，需要使用连接池，为每一个Jedis实例分配一个连接；而使用Lettuce，当多线程连接同一个连接实例时，是线程安全的。<br>SpringBoot2.0以后，默认的连接方式是Lettuce，我这里使用的也是Lettuce，首先添加Redis包：  </p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--redis包--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br></code></pre></div></td></tr></table></figure><p>如果使用的是Jedis连接，需要修改一下配置：  </p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.lettuce<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lettuce-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br></code></pre></div></td></tr></table></figure><p>建立连接  </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 使用Lettuce连接Redis  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span>  </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-meta">@Bean</span>  <br><span class="hljs-keyword">public</span> LettuceConnectionFactory <span class="hljs-title function_">connectionFactory</span><span class="hljs-params">()</span> &#123;  <br> <span class="hljs-type">LettuceConnectionFactory</span> <span class="hljs-variable">lettuceConnectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LettuceConnectionFactory</span>();  <br> lettuceConnectionFactory.setDatabase(redisConfigBean.getDatabase());  <br> lettuceConnectionFactory.setHostName(redisConfigBean.getHost());  <br> lettuceConnectionFactory.setPassword(redisConfigBean.getPassword());  <br> lettuceConnectionFactory.setPort(redisConfigBean.getPort());  <br>  <br> <span class="hljs-keyword">return</span> lettuceConnectionFactory;  <br>&#125;  <br></code></pre></div></td></tr></table></figure><h3 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a><a href="#%E6%95%88%E6%9E%9C%E6%BC%94%E7%A4%BA" title="效果演示"></a>效果演示</h3><ul><li><p><code>POST</code> 请求：设置 <code>ContentType=application/json</code> ，添加 <code>RequestBody</code> 中的内容，格式为 <code>Json</code> 格式<br><img src="/images/post.png"></p></li><li><p><code>GET</code> 请求<br><img src="/images/get.png"></p></li><li><p><code>PUT</code> 请求：设置 <code>ContentType=application/json</code> ，修改 <code>RequestBody</code> 中的内容，格式为 <code>Json</code> 格式<br><img src="/images/put.png"><br><img src="/images/put_get.png"></p></li><li><p><code>DELETE</code> 请求<br><img src="/images/delete.png"><br><img src="/images/delete_get.png"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
